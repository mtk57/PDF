# 配置
# /etc/systemd/system/python_daemon_test@.service

########################################################################################
#
# https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/7/html/system_administrators_guide/sect-managing_services_with_systemd-unit_files
# https://qiita.com/JhonnyBravo/items/a28074c20fa9adf02be3
#
#
# Requires
#   このユニットが依存するユニット。
#   指定したユニットのステータスが activeにならない場合は、このユニットも activeにならない。
#   Before,Afterの指定がない場合は同時に起動する
#
# After
#   指定したユニットの起動完了後にこのユニットが起動する。
#   起動の順番
#     Afterユニット -> このユニット -> Beforeユニット
#
# OnFailure
#   このユニットのステータスが failed になったときに、記載したユニットを起動する。
#
# Type
#   ユニットプロセスの起動タイプ
#     simple  : デフォルト値です。ExecStart で起動するプロセスは、サービスのメインプロセスです。
#     forking : ExecStart で起動するプロセスは、サービスのメインプロセスになる子プロセスを起動します。
#               親プロセスは、このプロセスが完了すると終了します。
#     oneshot : このタイプは simple と似ていますが、結果として生じるユニットを起動する前に終了します。
#     notify  : このタイプは simple と似ていますが、結果として生じるユニットは、通知メッセージが sd_notify() 関数で送信されないと起動しません。
#
# ExecStart
#   起動するプログラムを必要な引数をつけて絶対パスで指定。
#   ユニットの開始時に実行するコマンドまたはスクリプトを指定します。
#   ExecStartPre および ExecStartPost は、ExecStart の前後に実行するカスタムコマンドを指定します。
#   Type=oneshot を使用すれば、連続して実行する複数のカスタムコマンドを指定できます。
#   要は systemctl start <ユニットファイル> を行ったときに呼ばれる部分。
#
# ExecReload
#   設定ファイルの再読み込みをするコマンドを必要な引数をつけて絶対パスで指定。
#   ユニットの再読み込み時に実行するコマンドまたはスクリプトを指定します。
#   要は systemctl reload <ユニットファイル> を行ったときに呼ばれる部分。
#
# ExecStop
#   ExecStartで指定したプログラムを停止するコマンドを必要な引数をつけて絶対パスで指定。
#   ユニットの停止時に実行するコマンドまたはスクリプトを指定します。
#   要は systemctl stop <ユニットファイル> を行ったときに呼ばれる部分。
#
# TimeoutStartSec
#   プロセス開始タイムアウト値を指定する(秒)
#   指定しない場合は 10秒
#
# TimeoutStopSec
#   プロセス停止タイムアウト値を指定する(秒)
#
# WatchdogSec
#   サービス等を定期的に監視して稼働状態をチェックする為の機能である WatchDogのタイムアウト値を指定する(秒)
#   指定時間内にステータスが activeにならないとタイムアウトとなり、ステータスが in-activeとみなされる
#   要は生死監視
#
# Restart
#   プロセスが勝手に死んだ場合などに自動で再起動するための条件を指定する
#   当然、systemd経由で停止させた場合は対象外。
#     always     : 常に再起動される
#     on-failure : サービスプロセスが正常終了以外の時に再起動される
#                   - 終了コードがゼロでない
#                   - SIGHUP、SIGINT、SIGTERM、SIGPIPE以外のシグナルで終了
#                   - タイムアウト
#                   - ウォッチドッグタイムアウト
#     on-success : サービスプロセスが正常に終了した時のみ再起動される
#     on-abnormal: on-failureに近いが終了コードがゼロでないは除く
#                   - SIGHUP、SIGINT、SIGTERM、SIGPIPE以外のシグナルで終了
#                   - タイムアウト
#                   - ウォッチドッグタイムアウト
#     on-abort   : クリーンなシグナル以外で終了した時に再起動
#                   - SIGHUP、SIGINT、SIGTERM、SIGPIPE以外のシグナルで終了
#     on-watchdog: ウォッチドッグタイムアウトの時に再起動
#                   - ウォッチドッグタイムアウト
#
# NotifyAccess
#   Type=notify or WatchdogSec指定時の場合のみ有効。
#   通知をリッスンするために使用されるソケットへのアクセスを指定します。
#     none : デフォルト。すべてのステータスメッセージを無視します。
#     main : メインプロセスからのメッセージをリッスンする。
#     exec : 
#     all  : サービスのコントロールグループのすべてのメンバーを処理します。
#
# StartLimitInterval
# StartLimitBurst
#   StartLimitInterval の間に StartLimitBurst の回数だけ再起動が起きると、systemd は自動的に再起動するのを止めます。
#   デフォルトでは 10 秒の間に 5 回まで再起動が行われ、それを超えると再起動を諦めます。
#
# WantedBy
#   サービスを起動するターゲット(※)を指定します。
#    <ターゲット>
#    multi-user.target : グラフィカルではないテキストベースでのマルチユーザのセットアップを行う
#
#   ※ 起動プロセスやサービス等、複数のユニットをグループ化したユニット
#
########################################################################################

########################################################################################
# <主なシグナル>
# SIGHUP        端末の切断によるプロセスの終了
# SIGINT        割り込みによるプロセスの終了
#               CTRL+Cによるキーボードからの割り込みもこれ。
# SIGKILL       プロセスの強制終了
# SIGTERM       プロセスの終了（デフォルト）
# SIGCONT       一時停止したプロセスの再開
# SIGPIPE       
########################################################################################


[Unit]
Description = python daemon test
# Requires=
# After=
# OnFailure=

[Service]
Type=forking
ExecStart=/opt/python_daemon_test.py %i
# ExecReload=
# ExecStop=
# TimeoutStartSec=15
# TimeoutStopSec=3
# WatchdogSec=100
Restart=on-failure
# NotifyAccess=main
# StartLimitInterval=90
# StartLimitBurst=3

[Install]
WantedBy = multi-user.target