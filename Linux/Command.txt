Linux Command memo   since.2019/10/17-

CentOS8


===================================================================
コマンド        概要と使用例    ★よく使う
===================================================================
-------------------------------------------------------------------
arch            マシンのアーキテクチャを表示する
-------------------------------------------------------------------
attr            ファイルの拡張属性を表示・設定を行う

                <主なオプション>
                -l        複数の拡張属性を一覧表示
                -s        属性名を指定して拡張属性を設定
                -g        属性名を指定して拡張属性の値を表示
                -r        属性名を指定して拡張属性を削除

-------------------------------------------------------------------
bg              指定したジョブをバックグラウンドに移行する
-------------------------------------------------------------------
cat             ファイルの内容を表示する★

                <主なオプション>
                -n        行番号をつけて表示

                ヒアドキュメント「<<」を使って、特定の文字列が入力されるまで
                標準入力を取り込める

                例1：OSのバージョンを表示
                # cat /etc/redhat-release

-------------------------------------------------------------------
cd              カレントディレクトリを移動する★

                <ディレクトリ記号>
                /        ルートディレクトリ
                ~        ホームディレクトリ
                .        カレントディレクトリ
                ..       親ディレクトリ

-------------------------------------------------------------------
chacl           ファイルまたはディレクトリのアクセス制御リスト (Access Control List) を変更する
-------------------------------------------------------------------
chattr          ファイルのinode属性フラグを変更する
                属性の前に+/-/=をつけることで、属性のADD/REMOVE/UPDATEを行う。

                例：samplefileを削除不可能にする。
                # chattr +i samplefile

                <属性>
                a    追記のみ可能
                c    ファイルを圧縮
                d    dumpの対象外
                e    拡張フォーマットを使用
                i    変更不可
                j    データのジャーナリング
                s    安全な削除（データブロック内を消去）
                t    末尾のマージ不可
                u    削除不可
                A    atime（アクセス時刻）を更新しない
                D    ディレクトリを同期的に更新する
                S    同期的に更新

-------------------------------------------------------------------
chfn            ユーザー情報を変更する
-------------------------------------------------------------------
chgrp           ファイルやディレクトリのグループを変更する

                <主なオプション>
                -R        ディレクトリにのみ指定

-------------------------------------------------------------------
chmod           ファイルやディレクトリアクセス権限を変更する★

                <スティッキービット(StickyBit)>
                ファイルやディレクトリの削除・リネームは所有者もしくはrootのみに限定すること。
                chmodで「1000」もしくは「o+t」で指定。
                ファイルにも設定できるが、意味はないので注意。
                基本的にディレクトリに設定して、そのディレクトリ配下のファイルの操作を他ユーザから保護するためのもの。
                例えば、/tmp/ は始めからビットが立っている。

                例：ファイルaaaにスティッキービットを設定
                # ll
                -rwxrwxrwx. 1 root root    0  4月 24 07:49 aaa

                # chmod o+t aaa

                # ll
                -rwxrwxrwt. 1 root root    0  4月 24 07:49 aaa
                         ↑tがつく


-------------------------------------------------------------------
chown           ファイルやディレクトリのオーナーやグループを変更する

                <主なオプション>
                -R        ディレクトリにのみ指定

-------------------------------------------------------------------
cp              ファイルやディレクトリをコピーする★
-------------------------------------------------------------------
curl            
-------------------------------------------------------------------
cut             テキストファイルから文字列を取り出す

                <主なオプション>
                -d        フィールドの区切り文字を指定（デフォルトはタブ）
                -f        指定されたフィールドだけを表示

                例：passwdファイルからユーザー名だけを取り出し、最後の1行を表示
                $ cut -d : -f 1 /etc/passwd | tail -1
                yuko

-------------------------------------------------------------------
date            
-------------------------------------------------------------------
deluser         ユーザーを削除する
-------------------------------------------------------------------
df              ファイルシステムの使用状況を表示する★

                <主なオプション>
                -h        適切な単位で表示
                -i        inodeの使用状況を表示
                -k        キロバイトで表示

-------------------------------------------------------------------
diff            ファイルとファイルの内容の違いを表示する
-------------------------------------------------------------------
dmesg           システム起動時カーネルが画面に表示するメッセージを表示する

                /var/log/dmesg

-------------------------------------------------------------------
dnf             Red Hat系のLinuxディストリビューションで使われているRPMパッケージを扱うための
                パッケージ管理コマンドです。
                ソフトウェアのインストール（install）や更新（update）、アンインストール（remove）の際に
                利用します。

                「yum」の後継となるコマンドという位置付けで、yumと同じサブコマンド、オプションを
                使用可能です
-------------------------------------------------------------------
du              ディレクトリのサイズを表示する

                <主なオプション>
                -a        すべてのファイルについてのサイズを表示
                -h        適切な単位で表示
                -s        総和を表示
                -S        サブディレクトリの使用量を含めない

-------------------------------------------------------------------
exit            
-------------------------------------------------------------------
export          環境変数の一覧を表示する
-------------------------------------------------------------------
fdisk           パーティションの作成・削除・変更・情報表示を行う

                例１：
                # fdisk -l /dev/sd*

                例２：対話的に操作
                # fdisk /dev/sda

                <パーティションのタイプ>
                Linux スワップ パーティション   (ID=82)
                Linux データ パーティション     (ID=83)
                Linux LVM パーティション        (ID=8e)

                <ファイルシステム>
                ext            
                ext2        
                ext3        
                ext4        
                reisefs        
                xfs            
                jfs            
                vfat        
                exfat        
                btrfs        
                nfs            
                cifs        

                <ファイルの構成要素>
                ファイルシステムで使われる「ファイル」は以下の要素で出来ている
                ①ファイル名        
                ②inode                
                ③データブロック    

-------------------------------------------------------------------
fg              指定したジョブをフォアグラウンドに移行する
-------------------------------------------------------------------
fgrep           正規表現を使用しないでgrepする
-------------------------------------------------------------------
file            ファイルの種類を調べる

                例：
                $ file /etc
                /etc: directory

-------------------------------------------------------------------
find            ファイルの検索をする★

                <主なオプション>
                -name        ファイル名を指定して検索
                -type        タイプを指定して検索
                             f  ファイル
                             d  ディレクトリ

                例1：カレントディレクトリ配下の*.txtを検索
                # find . -name "*.txt"

                例2：ルートディレクトリ配下のpluginディレクトリを検索
                # find / -name plugin -type d

                例3：ルートディレクトリ配下の10MB以上のファイルを検索
                # find / -size +10M -type f


-------------------------------------------------------------------
free            空きメモリや、使用中メモリを表示する
-------------------------------------------------------------------
getfacl         ファイルのアクセス制御リスト (access control list) を取得する
-------------------------------------------------------------------
getfattr        ファイルの拡張属性を表示する
                attrパッケージに含まれている

                <主なオプション>
                -d          全ての「名前空間識別子.拡張属性」について値を出力
                -n 名前     指定した「名前空間識別子.拡張属性」の値を出力
                -m パターン 「名前空間識別子.拡張属性」の文字列のうち、パターンにマッチしたものを表示
                            （さらに値も表示したい場合は「-d」を先に記述して併用）
                            パターンに-を指定した場合は全てとなる
                -e 書式     値の書式を「text」「hex」「base64」のいずれかで指定


                例：全ての名前空間識別子.拡張属性と値をtextで表示する
                # getfattr -d -m - -e text ファイル

-------------------------------------------------------------------
grep            指定した検索文字列がテキスト内に存在した場合その行を抽出する★
                検索文字列には正規表現を使用できる。（使用したくない場合がfgrepを使う）

                <主なオプション>
                -r            ディレクトリ内も検索対象とする

                例1：
                # grep -r 検索文字列 ディレクトリ

-------------------------------------------------------------------
groupadd        グループを新規作成する
-------------------------------------------------------------------
groupdel        グループを削除する
-------------------------------------------------------------------
groups          グループを表示する
-------------------------------------------------------------------
head            テキストファイルの先頭部分を表示する★

                例：
                $ head -3 /etc/passwd
                root:x:0:0:root:/root:/bin/bash
                bin:x:1:1:bin:/bin:/sbin/nologin
                daemon:x:2:2:daemon:/sbin:/sbin/nologin

-------------------------------------------------------------------
history         コマンド履歴を表示する★
-------------------------------------------------------------------
hostname        ホスト名を表示・変更する★

                例：ホスト名を表示
                # hostname

                例：ホスト名を変更
                # hostname ホスト名

-------------------------------------------------------------------
id              ユーザー情報を表示する
-------------------------------------------------------------------
ifconfig        
-------------------------------------------------------------------
jobs            バックグラウンドジョブと一時停止中のジョブを表示する
-------------------------------------------------------------------
join            2つのファイルを結合する
-------------------------------------------------------------------
journalctl      システムのログ（ジャーナル）を表示する。(syslogみたいなもの)★

                <主なオプション>
                -e                最近のメッセージを表示
                -x                詳細情報を表示
                -f                tail -fのような常に最新を表示する
                -u <Unit名>       特定サービスのメッセージだけを表示
                                  Unit名とはsystemctlで表示されるsshd.serviceなど。.serviceは省略できる。
                                  ワイルドカードとして*（アスタリスク）が使える。
                                  例：
                                  # journalctl -u httpd

-------------------------------------------------------------------
kill            プロセスにシグナルを送る★

                <主なオプション>
                -l        シグナルの一覧を表示

                <主なシグナル>
                SIGHUP        端末の切断によるプロセスの終了
                SIGINT        割り込みによるプロセスの終了
                              CTRL+Cによるキーボードからの割り込みもこれ。
                SIGKILL       プロセスの強制終了
                SIGTERM       プロセスの終了（デフォルト）
                SIGCONT       一時停止したプロセスの再開

-------------------------------------------------------------------
killall         プロセス名を指定してシグナルを送信する

-------------------------------------------------------------------
ld              共有ライブラリを作成する
-------------------------------------------------------------------
ldconfig        共有ライブラリの依存関係情報を更新する
-------------------------------------------------------------------
ldd             共有ライブラリの依存関係を表示する
-------------------------------------------------------------------
less            テキストファイルを閲覧する★

                操作はmanと同じ


-------------------------------------------------------------------
ln              ファイルやディレクトリにリンクを設定する★

                <主なオプション>
                -s        シンボリックリンク(symlink)を作成

                例１：orgのハードリンクhard_linkを作成
                # ln org hard_link

                例２：orgのシンボリックリンクsym_linkを作成
                # ln -s org sym_link

                <ハードリンク>
                リンクファイルが使用するinodeはオリジナルと同じ
                ディレクトリには作成不可
                異なるパーティションでは作成不可。（inodeは同一ファイルシステム内で一意のため）
                llで表示すると、パーミッションの右にリンク数が表示される

                # ln aaa ccc
                # ll
                -rwxrwxrwt. 2 root root    0  4月 24 07:49 aaa
                -rwxrwxrwt. 2 root root    0  4月 24 07:49 ccc


                <シンボリックリンク>
                リンクファイルが使用するinodeはオリジナルとは異なる
                ディレクトリにも作成可
                異なるパーティションでも作成可。
                Windowsでいうショートカットと同じなので、リンクファイルを消してもオリジナルは消えない。
                llで表示すると、パーミッションの先頭に「l」が付く。

                # ll
                lrwxrwxrwx. 1 root root    3  4月 24 08:03 bbb -> aaa


-------------------------------------------------------------------
locate          ファイルを検索する★
                インデックス検索のため高速。

-------------------------------------------------------------------
ls              ディレクトリの内容をリスト形式で表示する★

                <主なオプション>
                -l        詳細表示（llでも同じ）
                -i        inodeを表示
                -d        ディレクトリ自身の情報を表示
                -a        隠しファイルの表示
                -F        ファイルタイプを表す記号を表示
                            / ディレクトリ
                            * 実行可能ファイル
                            @ シンボリックリンク

                例1：ディレクトリのみ表示
                # ls -l | grep ^d

-------------------------------------------------------------------
lsblk           利用可能なブロックデバイスの一覧を表示する
-------------------------------------------------------------------
lsscsi          
-------------------------------------------------------------------
lshw            
-------------------------------------------------------------------
lspci           すべてのPCIバスと接続されているデバイスに関する情報を表示する
-------------------------------------------------------------------
lsusb           USBバスと接続されているデバイスに関する情報を表示する
-------------------------------------------------------------------
lsmod           システムにロードされているモジュールの状態を表示する
-------------------------------------------------------------------
lsattr          ファイルのinode属性フラグを表示する

                例：
                # lsattr aaa.txt
                ----ia------------- aaa.txt     ※i, a フラグがONになっている

-------------------------------------------------------------------
man             コマンドのマニュアルを表示する

                <キー操作>
                SPACE        次ページ
                b            前ページ
                ENTER        次の行
                /文字列      検索
                n            次の検索
                q            終了

-------------------------------------------------------------------
mkdir           ディレクトリを作成する★

                <主なオプション>
                -p        中間ディレクトリを同時に作成する

-------------------------------------------------------------------
modinfo         lsmodで表示されたモジュールの詳細を表示する
-------------------------------------------------------------------
modprobe        指定されたモジュールの依存関係を確認し、必要なモジュールを自動的に追加もしくは削除する
-------------------------------------------------------------------
more            ファイルをページ単位で閲覧する 

                <キー操作>
                SPACE        次ページ

-------------------------------------------------------------------
mount           ファイルシステムをマウントする★

                <主なオプション>
                -a        /etc/fstabに記載されているファイルシステムを全てマウント
                -r        ファイルシステムを読み取り専用でマウント
                -w        ファイルシステムを読み書き可能なモードでマウント（デフォルト）
                -t        ファイルシステムタイプを指定してマウント
                -o        マウントオプションを指定
                --bind    サブツリーをどこか他の場所に再マウント

                </etc/fstabのフィールド>
                ①デバイスファイル名（デバイスファイル名、ラベル名、UUID）
                ②マウントポイント
                ③ファイルシステムの種類
                ④マウントオプション
                ⑤バックアップの指定
                ⑥ファイルシステムのチェック

-------------------------------------------------------------------
mv              ファイルを移動する★
                リネームにも使える
-------------------------------------------------------------------
netstat         
-------------------------------------------------------------------
nice            プロセスの優先度を変更する
-------------------------------------------------------------------
nohup           ログアウトしてもコマンドを実行し続ける
-------------------------------------------------------------------
od              ファイルの内容を16進数などで表示する

                <主なオプション>
                -d        10進数
                -x        16進数
                -c        ASCII文字 or エスケープ文字として表示

-------------------------------------------------------------------
passwd          パスワードを変更する★
-------------------------------------------------------------------
paste           ファイルを行単位で結合する
-------------------------------------------------------------------
pgrep           実行中のプロセスの情報を検索する

                <主なオプション>
                -t        指定した端末で実行されているプロセスIDを検索
                -u        指定された実効ユーザIDに該当するプロセスIDを検索
                -U        指定された実ユーザIDに該当するプロセスIDを検索

-------------------------------------------------------------------
pkill           
-------------------------------------------------------------------
printenv        
-------------------------------------------------------------------
ps              プロセスの情報を表示する★

                <主なオプション>
                -e | a    すべてのプロセスを表示
                -f | u    詳細情報を表示
                     x    制御端末のないプロセス情報も表示

-------------------------------------------------------------------
pstree          プロセスの階層構造を表示する

                <主なオプション>
                -h          カレントのプロセスとその先祖プロセスを強調表示
                -H <PID>    指定したプロセスとその先祖プロセスを強調表示
                -p          プロセスIDをつけて表示

-------------------------------------------------------------------
pwd             現在の作業ディレクトリパスを表示する★
-------------------------------------------------------------------
pvcreate        LVMの物理ボリュームを作成する
                Linuxでは当初、HDDなどに直接ファイルシステムを割り当てて管理していましたが、
                現在では、物理ボリュームをまとめて仮想化されたボリュームグループを作り上げた後、
                それを論理ボリュームに切り分けて管理する仕組み「LVM（Logical Volume Manager）」が取り入れられています。
                例えば、CentOSでは、デフォルト設定のインストールで論理ボリュームを使用します。

-------------------------------------------------------------------
reboot          
-------------------------------------------------------------------
renice          プロセスの優先度を変更する
-------------------------------------------------------------------
rm              ファイルやディレクトリを削除する★

                <主なオプション>
                -f        強制実行
                -r        再帰的に削除する

-------------------------------------------------------------------
rmdir           空ディレクトリを削除する
-------------------------------------------------------------------
route           ルーティングの表示や設定を行う
-------------------------------------------------------------------
rpm 


                例：インストール済みのパッケージを確認
                # rpm -qa | grep [パッケージ名]

-------------------------------------------------------------------
scp             
-------------------------------------------------------------------
sed             テキストファイルの文字列を置換する
-------------------------------------------------------------------
set             シェル変数の一覧を表示する
-------------------------------------------------------------------
setfacl         ファイルのアクセス制御リスト (access control list) を設定する

                <主なオプション>
                -m 設定            拡張ACLを設定する
                -x 設定            指定した拡張ACLを削除する
                -b                 全ての拡張ACLを削除する
                -R                 全ての操作をディレクトリに対して再帰的に実施する

                <設定>
                u:ユーザー:許可内容(r|w|x)     ユーザーに対する許可
                g:グループ:許可内容(r|w|x)     グループに対する許可
                or:許可内容(r|w|x)             その他に対する許可


                例：ユーザyokoにaaa.txtのアクセス権(rw)を与える
                # getfacl aaa.txt       ※現状を確認
                # file: aaa.txt
                # owner: root
                # group: root
                user::rw-
                group::r--
                other::r--

                # setfacl -m u:yoko:rw aaa.txt     ※アクセス権を付与

                # getfacl aaa.txt
                # file: aaa.txt
                # owner: root
                # group: root
                user::rw-
                user:yoko:rw-            ※追加された
                group::r--
                mask::rw-
                other::r--

                # getfattr -d -m - -e hex aaa.txt    ※拡張属性を確認
                # file: aaa.txt
                security.selinux=0x756e636f6e66696e65645f753a6f626a6563745f723a757365725f686f6d655f743a733000
                system.posix_acl_access=0x0200000001000600ffffffff02000600e803000004000400ffffffff10000600ffffffff20000400ffffffff
                trusted.SGI_ACL_FILE=0x0000000500000001ffffffff0006000000000002000003e80006000000000004ffffffff0004000000000010ffffffff0006000000000020ffffffff00040000

                →「system.posix_acl_access」と「trusted.SGI_ACL_FILE」が追加されている

-------------------------------------------------------------------
setfattr        ファイルの拡張属性を設定・削除を行う
                attrパッケージに含まれている

                <主なオプション>
                -n 名前        指定した「名前空間識別子.拡張属性」の拡張属性を設定
                -x 名前        指定した「名前空間識別子.拡張属性」の拡張属性を削除する
                -v 値          拡張属性の値を設定する（-nとともに使用）

                例：test1.txtに「user.test=value0」という拡張属性を設定する
                # setfattr -n user.test -v value0 test1.txt

-------------------------------------------------------------------
shutdown        
-------------------------------------------------------------------
sort            ファイルの内容を行単位でソートする
-------------------------------------------------------------------
split           ファイルを決まった大きさに分割する

-------------------------------------------------------------------
ss              ネットワークのソケット情報を表示する
                受付中のポートを確認するときに便利。

                <主なオプション>
                -t  TCPソケットを表示
                -n  サービス名の名前解決を行わない（ポート番号を表示）
                -a  接続待ち状態（LISTEN）のソケットと接続待ち状態にないソケットの両方を表示する

-------------------------------------------------------------------
ssh             
-------------------------------------------------------------------
su              一時的にユーザーを切り替える★

                例1：
                $ su root            rootに切り替える。ログイン環境はそのまま。

                例2：
                $ su - root          rootに切り替える。ログイン環境も切り替わる。

-------------------------------------------------------------------
sudo            管理者に許可されている管理用コマンドを実行する★
-------------------------------------------------------------------
systemctl       systemdをコントロールする

                sshdの再起動
                # systemctl restart sshd

                sshdの状態表示
                # systemctl status sshd

-------------------------------------------------------------------
tail            テキストファイルの末尾部分を表示する★

                <主なオプション>
                -f        常に最終部分を読み続ける（syslogのように動的に増えているファイルに有効）

                例：
                $ tail -3 /etc/passwd
                pesign:x:979:979:Group for the pesign signing daemon:/var/run/pesign:/sbin/nologin
                tcpdump:x:72:72::/:/sbin/nologin
                yuko:x:1000:1000::/home/yuko:/bin/bash
-------------------------------------------------------------------
tar             アーカイブファイルの作成・参照・展開する★
                オプションのハイフンは省略可能

                <主なオプション>
                -c        アーカイブファイルを作成
                -t        アーカイブファイルの内容を表示
                -x        アーカイブファイルの展開
                -f        アーカイブファイル名を指定
                -v        詳細情報を表示
                -j        アーカイブに対して、bzip2を使用(※1)
                -J        アーカイブに対して、xzを使用(※1)
                -z        アーカイブに対して、gzipを使用(※1)

                ※-cと併用すれば圧縮、-xと併用すれば解凍になる。

                「アーカイブ・展開」と「圧縮・伸張（解凍）」は異なるので注意。
                アーカイブは単に複数ファイルを１ファイルにまとめるだけなので、ファイルサイズは小さくならない。

                <拡張子>
                .tar    tar形式でアーカイブ
                .tgz    tar形式でアーカイブされ、gzipで圧縮

                <圧縮・解凍コマンド>
                gzip/gunzip
                bzip2/bunzip2
                xz/unxz

-------------------------------------------------------------------
tee             標準入力から読み込んだデータを標準出力とファイルの両方に出力する
-------------------------------------------------------------------
top             プロセスの情報を周期的にリアルタイムに表示する
                ※Windowsのタスクマネージャのイメージ
                プロセスの優先度の変更もできる。（reniceでも可能）

-------------------------------------------------------------------
touch           ファイルを作成する★
-------------------------------------------------------------------
tr              テキストファイルの1文字を置換する（単語単位では無理）

                例えば、WindowsのファイルをLinuxにコピーしたときに
                Windowsの改行コード(\r\n)の\rを削除する場合とかに便利
-------------------------------------------------------------------
tree            ディレクトリをツリー表示する★

                例：
                # tree | less
                # tree /etc

-------------------------------------------------------------------
type            コマンドのタイプ（パスやエイリアス）を表示する

                例：
                # type cd
                cd はシェル組み込み関数です

-------------------------------------------------------------------
umount          特定のファイルシステムをルートファイルシステムから切り離す

                <主なオプション>
                -a        /etc/fstabに記載されているファイルシステムを全てアンマウント
                -r        アンマウントが失敗した場合、読み取り専用での再マウントを試みる
                -t        指定したタイプのファイルシステムのみに対してアンマウント

-------------------------------------------------------------------
uname           カーネルバージョンやマシンアーキテクチャなどのシステム情報を表示する
-------------------------------------------------------------------
uniq            並び替え済のファイルから重複行を削除する
-------------------------------------------------------------------
unset           シェル変数を削除する
-------------------------------------------------------------------
updatedb        インデックス検索に使用するデータベースを更新する★

                <主なオプション>
                -e        対象外とするディレクトリを指定する
                          /etc/updatedb.confでも同じことが可能。
                -o        データベース名を指定する

-------------------------------------------------------------------
uptime          現在時刻、起動時間、ユーザ数、平均負荷を表示する
-------------------------------------------------------------------
useradd         ユーザーを新規作成する
-------------------------------------------------------------------
users           ログインユーザの一覧を表示する
-------------------------------------------------------------------
vi              ファイルの編集を行う。

                <モード操作>
                ESC                コマンドモード

                <コマンド>
                i                  挿入モード
                0                  行の先頭に移動
                $                  行の末尾に移動
                G                  最終行に移動
                CTRL + b           先頭に向かってスクロール
                CTRL + f           末尾に向かてスクロール
                :wq                保存して終了
                :q!                保存せずに強制終了
                :w                 ファイル名を変更せずに保存
                :w <FileName>      ファイル名を変更して保存
                :!                 外部コマンド(lsとか)を実行
                dd                 カーソル行を削除
                D                  カーソルから行の最後まで削除
                x                  カーソル上の1文字を削除（要はdeleteキーと同じ）
                /<文字列>          カーソルから末尾に向かって検索
                ?<文字列>          カーソルから先頭に向かって検索
                n                  次を検索
                N                  前を検索
                u                  アンドゥ（コマンドの取り消し）
                :set number        行番号を表示
                :set list          タブ文字などを表示

-------------------------------------------------------------------
vim             viの高機能版。色がつくので見やすい。
                CentOSにはデフォルトで入っていない。。。ので以下で入れる
                # yum install vim

-------------------------------------------------------------------
w               ログインユーザとユーザが行っていることを表示する
-------------------------------------------------------------------
wall            ログインユーザ全員にメッセージを送る
-------------------------------------------------------------------
watch           指定されたコマンドを繰り返し実行する

                <主なオプション>
                -n        実行間隔(秒)

                例：5秒ごとにdateを実行する
                # watch -n 5 date

-------------------------------------------------------------------
wc              ファイル内のバイト数、単語数、行数等を表示する

                <主なオプション>
                -c        バイト数
                -l        行数
                -w        単語数

-------------------------------------------------------------------
whereis         指定されたコマンドのバイナリ・ソース・マニュアルの場所を表示する

-------------------------------------------------------------------
which           指定されたコマンドが格納されているディレクトリを検索する
                環境変数PATHを元に検索する

-------------------------------------------------------------------
who             ログインしているユーザを表示する
-------------------------------------------------------------------
yum             Red Hat系のLinuxディストリビューションで使われているRPMパッケージを
                統合的に扱うためのパッケージ管理コマンド
                最新のディストリビューションでは、dnfに移行している。

                参考：https://eng-entrance.com/linux-package-yum

                リポジトリ(repoファイル)に記載されている（ファイルorURL）から、
                インストールしたいパッケージを検索し、インストールしたり出来る。

                yumの後継は dnf


                例：パッケージをインストール
                # yum install [パッケージ名]

                例：インストール済みのパッケージを確認
                # yum list installed | grep [パッケージ名]

-------------------------------------------------------------------
■シェル変数
    設定されたシェルだけが使用する変数。
    子プロセスには引き継がれない。

    参照：シェル変数名 or ${シェル変数名}
            例：echo PWD
                echo ${PWD}
    更新：シェル変数名=値
            例：TEST="SE"
    削除：unset シェル変数名
            例：unset TEST

    <主なシェル変数>
    PWD         カレントディレクトリの絶対パス
    PATH        コマンド検索パス
    HOME        ユーザーのホームディレクトリ
    PS1         プロンプトを定義
    PS2         2次プロンプトを定義
    HISTFILE    コマンド履歴を格納するファイルを定義
    LANG        言語情報

-------------------------------------------------------------------
■環境変数
    設定されたシェルとそのシェルで起動したプログラムが使用する変数。
    子プロセスに引き継がれる。

-------------------------------------------------------------------
■リダイレクト
    出力先を変更すること。
    Linuxでは、
        0：標準入力（キーボードなど）
        1：標準出力（画面など）
        2：標準エラー出力（画面など）
    となっていて、何も指定しなければ、標準出力になるが、
    リダイレクトを使えば、コマンドの結果を画面ではなくファイルに出力できる。

    <記号>
    >
    <
    >>
    &

    例： Aは存在するファイル、Bは存在しないファイルとする

    $ ls > file1            lsの結果をfile1に格納
    $ ls >> file2           lsの結果をfile2に追記して格納
    $ ls A B 2> file3       標準エラー出力(2)のみをfile3に格納
    $ ls A B &> both        標準出力(1)、標準エラー出力(2)の両方をbothに格納
    $ ls A B >& both        同上
    $ ls A B 1> both 2>&1   同上
    $ コマンド1 < file1     file1の内容を標準入力からコマンド1に取り込む
    $ コマンド2 > /dev/null 2>&1
                            コマンド2の結果（標準出力）を/dev/nullに出力し、
                            標準エラー出力は標準出力と同じ（/dev/null）にする
                            /dev/nullに出力された出力は破棄される。（どこにも出力されない）

-------------------------------------------------------------------
■パイプ
    コマンドの処理結果（標準出力）を次のコマンドの標準入力に渡すこと。

    <記号>
    |

    例：
    $ cat /etc/passwd | head -3            ※catコマンドの結果をheadコマンドに渡す
    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/bin:/sbin/nologin
    daemon:x:2:2:daemon:/sbin:/sbin/nologin


-------------------------------------------------------------------
■コマンドの連続実行
    <記号>
    ;        左辺のコマンドの実行結果に関係なく、右辺のコマンドを実行
    &&       左辺のコマンドが正常終了の場合のみ、右辺のコマンドを実行
    ||       左辺のコマンドが正常終了以外の場合のみ、右辺のコマンドを実行（ORじゃないので注意）

    コマンドの終了ステータスは、以下で確認可能。
    $ echo $?

-------------------------------------------------------------------
■正規表現
    <主な記号>
    .        任意の1文字
    ^        行の先頭
    $        行の末尾
    *        直前の文字が0回以上の繰り返しに一致
    ?        直前の文字が0回もしくは1回の繰り返しに一致
    +        直前の文字が1回以上の繰り返しに一致
    []        []内の文字グループと一致
                例：
                [abAB]     a, b, A, Bのいずれかの文字
                [^abAB]    a, b, A, B以外のいずれかの文字
                [a-dA-D]   a, b, c, d, A, B, C, Dのいずれかの文字

-------------------------------------------------------------------
■主なディレクトリ(CentOS 8)
    bin     一般ユーザ、管理者が使用するコマンドを配置
    boot    システム起動時に必要なブートローダ関連のファイルやカーネルイメージを配置
    dev     デバイスファイルを配置。システム起動時に接続されているデバイスがチェックされ自動的に作成される
    etc     システム管理用の設定ファイルや、各種ソフトウェアの設定ファイルを配置
    home    ユーザのホームディレクトリを配置
    lib     /binや/sbinなどに置かれたコマンドやプログラムが利用する共有ライブラリを配置
    lib64   64bit用の共有ライブラリを配置
    media   CD/DVDなどのデータを配置
    mnt     CD-ROMなどのファイルシステムの一時的なマウントポイント
    opt     Linuxインストール後、追加でインストールしたパッケージ（ソフトウェア）を配置
    proc    カーネルやプロセスが保持する情報を配置。仮想ファイルシステムであるためファイル自体は存在しない
    root    rootユーザのホームディレクトリ
    run     ブートしてからのシステム情報を配置。（pidファイルやlockファイル、ソケットファイルなど）
            再起動時に消去される
    sbin    主にシステム管理者が使用するコマンドを配置。ただしオプションによって一般ユーザも使用可能
            （ip, shutdown, reboot など）
    srv     システムによって提供されたサイト固有のデータ群。FTPやWWWでユーザー用のディレクトリとして使用される
    sys     ドライバ関連のプロセス情報群。 /proc が膨大になるのを防ぐために分けられている
    tmp     アプリケーションやユーザが利用する一時ファイルを配置
            再起動時に消去される
    usr     全ユーザが共有するデータを配置。ユーティリティ、ライブラリ、コマンドを配置
    var     システム運用中にサイズが変化するファイルを配置。（ログ等）

    参考：https://qiita.com/uhooi/items/c1388f8d803641bfb8f3
-------------------------------------------------------------------
■デバイス
    <ハードディスク>    /dev/sd*n   *：a～
        SCSI                        n：パーティション番号(1～)
        SATA
        IDE/ATA
        USB

-------------------------------------------------------------------
■inode属性フラグ

    <取得・設定コマンド>
    lsattr
    chattr

-------------------------------------------------------------------
■拡張ファイル属性、拡張属性、EA(extended attributes)

    従来のinode内に格納されるファイル属性（パーミッション）に加えて、
    inode領域外の拡張属性ブロックに格納される。inodeから参照される属性。
    ext2, ext3, ext4, JFS, ReiserFS, XFS, Btrfs といった主要なファイルシステムで利用することができる。
    主にACL, SELinux, capabilityなどが拡張属性を利用する。

    <形式>
    名前空間 + "." + 属性名 + "=" + 値

    例：
    user.myattr='123'


    <名前空間>
    system    ACL(system.posix_acl_access)が利用する
    security  SELinux(security.selinux)やケーパビリティ(security.capability)が利用する
              特権を持つプロセスだけが変更できる
    trusted   特権を持つプロセスだけがアクセスできる
              (GlusterFSとかもこれを使用している)
    user      一般ユーザーが利用する（自由に定義可能）

    <取得・設定コマンド>
    getfattr
    setfattr

    <システムコール>
    getxattr
    setxattr

-------------------------------------------------------------------
■ACL (Access Control Lists)
    POSIXで定義されているアクセス制御を実装したもの。
    従来のUnix形式での「所有者/グループ/その他のユーザ」によるアクセス制御に加えて
    特定のユーザあるいはグループに対するアクセス権限を設定できる。

    <取得・設定コマンド>
    getfacl
    setfacl

    <システムコール>
    ???


    WindowsのACLとLinuxのパーミッションは1対1で対応していない。

    Windows ACL              Linux Permission
    ---------------------------------------------
    読み取り                 4 (r--)
    書き込み                 2 (-w-)
    読み取りと実行           1 (--x)
    フルコントロール、変更   7 (rwx)
    アーカイブ属性           所有者の実行権
    隠しファイル属性         無視
    読み取り専用             所有者の書き込み権限の削除

    Everyone                 その他のユーザに相当


-------------------------------------------------------------------
■SELinux

デフォルトでは有効になっているので、無効にする方法

# vi /etc/selinux/config   ※設定ファイルを開く

SELINUX=disabled           ※変更して保存

# reboot                   ※再起動
# getenforce               ※確認
Disabled


-------------------------------------------------------------------
■/run とは
tmpfsをマウント。つまりRAMディスク。容量も小さい。
リブートすれば消える。

