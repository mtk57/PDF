ログ設計 memo



・ログ設計指針が重要視され過ぎで、セキュリティ対策の一環や迅速なトラブル対応のために、
　ありとあらゆるログを取得するといったプロジェクトをまれに目にする。
・しかしそうなると、逆にログが膨大な量になり、解析に時間がかかるうえ、
　運用が開始されると結局、重要なログメッセージのみを監視するということになりがちである。
・ログ自体を出力しなければ、ログ出力がパフォーマンストラブルを引き起こすこともないだろう。

・本当に必要なログが決まったら、出力するログの目的に応じたログレベルやログ出力方式を決定する。

LEVEL  使用例
-------------------------------------------------------------------------------------------
trace  ループ内部の変数などdebugの中でも大量に出力されるメッセージ。
       あまり使用しているプロジェクトはない

debug  セッション内部の情報やユーザーHTTPリクエスト、レスポンス情報など、
       開発中やテスト用のデバッグメッセージ

info   アプリケーションの起動情報やログインしたユーザーIDなど毎回出力させたいメッセージ

warn   2重ログイン禁止のシステムで2重ログイン要求が発生したなど
       想定内の問題が発生したが、リクエストを処理し運用に問題ないメッセージ

error  DBサーバが無応答など、ユーザーからの処理を処理できない場合

fatal  アプリケーションがこれ以上動作できない場合など。
       あまり使用しているプロジェクトはない


-------------------------------------------------------------------------------------------
■ログポリシー

#  ポリシー
-------------
1  本ポリシーの適用は、以下の3サービスとする。
   md, cd, rd

2  保持する過去ログのサイズ制限が厳しいため、正常動作時は最低限の情報だけを出力するに留める方針とする。

3  各サービス毎にログローテート（※１）を行い、保持する過去ログは一定数以上増加しないようにする。

4  設計値としての過去ログの最大保持数については、過去ログを保持するディスク領域のサイズが不明のため、
   割当予定サイズから逆算して求めるものとする。

5  ログ増加頻度が高い運用では過去ログの最大保持数が重要であり、逆の場合は過去ログの最大保持期間が重要となる。
   サービスの性質上、前者の値がより重要とする。

6  デフォルトのログレベル設定は以下とする。
   正常動作時はイベントログ、ログともに何も出力しない。
   ・イベントログ：WARNING
   ・ログ：WARNING
   ・トレース：INFO

7  ログレベル毎の出力内容
   ・WARNING以上：一般的なポリシーと同じ。解析に役立つよう可能な限り詳細な情報を出力すること。
   ・INFO：※２
   ・DEBUG：INFOの詳細版。変数の内容、呼び出しメソッド名、引数、戻り地など。
   ・TRACE：ライブラリの情報など。

8  ログ回収時に全ての過去ログを回収しようとするのは無駄なため、過去ログはログ回収の対象外となる領域に配置する。

9  過去ログは以下のオプションにより選別できるようにする。
   ・回収対象（サービス、ボリューム、ブリック）
   ・回収世代
10 過去ログ最大保持数、最大保持期間、過去ログ格納ディレクトリパス等は設定ファイルに定義し、サービス起動時に変更できるように設計する。


※１  ログローテートの動作イメージ
      1.カレントログサイズが閾値を超えた場合、リネーム・圧縮を行う。この圧縮ファイルを過去ログと呼ぶ。
      2.過去ログの最大保持数、もしくは最大保持期間の閾値を超えた場合、最古の過去ログから閾値までの過去ログを全て削除する。
        つまり、保持する過去ログ数はある時点からは増えない。
※２  INFOで出力する内容
      1.サービスの開始・停止などの動作上の契機
      2.起動時の共通情報（読み込んだDB、設定ファイルの値）
      3.転送対象のパス、対象の属性情報などのサービス固有の重要情報。（1KB以内）



■過去ログの最大保持数の求める
  ※太字は計算式が入っているので編集禁止


 ●固定パラメータ
   <共通>
   ディスクサイズ    2,000  [MB/Dir]                           J32
   圧縮率            30.0   [%]                                J33

   ディスク割当率      30.0 [%]     30.0 [%]     30.0 [%]      J36
   カレントログサイズ  10.0 [MB]    10.0 [MB]    10.0 [MB]     J37

 ●動的パラメータ
   ディスク割当サイズ   600 [MB]     600 [MB]     600 [MB]     J41   =J32*J36/100
   過去ログサイズ       3.0 [MB]     3.0 [MB]     3.0 [MB]     J42   =J37*J33/100



●総ディスク割当率        90.0 [%]                                   =J36+P36+V36
●総ディスク割当サイズ 1,800.0 [MB]                                  =J41+P41+V41
●総過去ログ保持数         590 [個]                                  =J51+P51+V51

●過去ログ最大保持数       197 [個]   197 [個]   197 [個]            =ABS((J37-J41)/J42)



--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
rsyslog memo

rsyslog.conf
  syslogで送信されたデータを、「どのようなフォーマットでどこに出力するか」を定義。
  フォーマットは、テンプレートで指定可能。
  出力先はaction()で指定可能。



syslogで送信されたメッセージを整形して、指定ファイルに出力するサンプル

/etc/rsyslog.d/hoge_rsyslog.conf
------------------------
template(name="hoge-eventlog-style" type="list") {
  constant(value="{")
    constant(value="¥"syslogtime\":\"")
    property(name="timereported" dateFormat="rfc3339")
    constant(value="¥",")
    property(name="msg")
  constant(value="}\n")
}
if ($msg contains 'hoge') then {
  user.info action(type="omfile" file="/var/log/hoge/event.log" sync="on" template="hoge-eventlog-style")
  user.info stop
}
------------------------
●サンプル解析

template
  構文：template(
          name=”TEMPLATE_NAME”
          type=”string”
          string="text %PROPERTY% more text" 
          [option.OPTION="on"])

  name：テンプレート名。この名前で参照できる
  type：「list」、「subtree」、「string」、「plugin」が指定できる
         string：% または " などのその他の文字を使用する場合は、
                 それらの文字を文字どおりエスケープする必要があります。

テンプレート本体（{}で囲まれた部分）には以下が使える
  constant()   出力する文字列を指定する
  property()   プロパティを指定する


property(name="timereported" dateFormat="rfc3339")
  timereported  テンプレートで使えるマクロの1つ。ログが出力された日時を返す。
  dateFormat    日時の形式


$msg
  →syslog送信されたmsgそのもの


if ($msg contains 'hoge') then {
  →$msgに'hoge'を含む場合は真


action(type="omfile" file="/var/log/hoge/event.log" sync="on" template="hoge-eventlog-style")
  type      モジュールを指定する
            omfile：ファイル書き出しモジュール(OutputModuleFile)
  file      出力先
  sync      ログの書き込み後にsync（バッファのフラッシュ）が行われる
  template  使用するテンプレート名


user.info
  →Facility (ファシリティー) /Priority (優先度) ベースのフィルター
    user   ユーザプログラムが対象
    info   INFOレベル以上が対象


stop
  →選択したメッセージを破棄する



●出来上がる文字列
constant(value="{")
constant(value="¥"syslogtime\":\"")
property(name="timereported" dateFormat="rfc3339")
constant(value="¥",")
property(name="msg")
constant(value="}\n")
{"syslogtime":"2016-12-31T20:02:05.123456Z",syslog送信されたmsgそのもの}\n



参考
https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/7/html/system_administrators_guide/s1-basic_configuration_of_rsyslog



--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

