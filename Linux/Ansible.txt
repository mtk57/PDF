Ansible memo   2020.5.4


簡単にまとめると、複数のノードに同じことをやらせる場合に便利な自動化支援ツール。

例えば、100台のサーバに手作業で同じこと（httpdインストールだったり）をさせる場合、
Ansibleでその手作業の内容をPlayBookに書いておけば、保守も楽だし、手順書も作らなくても済むかも。

インストール手順は、VirtualBox.txtを参照。

=========================================================================
■主な用語

PlayBook (プレイブック)
タスクを組み立てて自動化を作り上げるYAML形式で書かれるファイルのことを言います。
インベントリに記載されたグループ（ノード）を指定し、タスクを実行順に記載していく。
拡張子は「yml」
タスクごとにファイルを分割することもできる。


Inventory (インベントリ)
タスクを実行するノードを定義したファイル。iniファイル形式。
インベントリファイルには拡張子がつきません。
ノードはグループ化できる。


YAML (ヤムル)
配列やハッシュで構造化されたデータを表現するためのフォーマットです。 
XMLと比べると汎用性に欠けますが、その分シンプルで人間にも読みやすい データ形式です。 
配列を値に持つハッシュ、ハッシュの配列の配列など、ネストしたデータを扱う場合、
インデント（一般的には半角スペース2個）の深さで階層の深さを表現します。 


モジュール
作業（タスク）を部品化したものです。
Ansibleには標準で2,000近くのモジュールがありますが、自分で作成することも出来ます。
モジュールに与えられたパラメータは変数として保存できる為、後から上書きすることも出来ます。


Role (ロール)
PlayBookの一連のtask、handlers、files、templatesなどをまとめたものです。


=========================================================================
■基本的なディレクトリ構成例

/etc/ansible/
    ├-- ansible.cfg                        ※Ansible設定ファイル
    ├-- hosts                              ※インベントリファイル。ファイル名は自由に決めてよい。
    ├-- roles                              ※Role群を配置するディレクトリ(ディレクトリ名は固定)
    │   └-- httpd                         ※Role。ロール名は自由に決めてよい。
    │      ├-- handlers                   ※tasks/main.ymlの実行が終わったあとに1回だけ実行されるtaskを格納する(任意)
    │      │ └-- main.yml
    │      ├-- defaults                   ※デフォルト変数ファイルを格納する(任意)
    │      ├-- files                      ※デプロイするファイルを格納する(任意)
    │      ├-- meta                       ※メタデータ定義を格納する(任意)
    │      ├-- tasks                      ※roleの核となるtaskを格納する(必須)
    │      │ └-- main.yml
    │      ├-- templates                  ※デプロイするテンプレートファイルを格納する(任意)
    │      │ └-- httpd.conf.j2
    │      └- vars                        ※変数ファイルを格納する(任意)
    │         └-- main.yml
    └-- site.yml                           ※ansible-playbookコマンドに指定するメインのPlayBook。
                                              ファイル名は自由に決めてよい。
                                              rolesディレクトリの各ロールを読み込み実行するような記述にする。

main.ymlはファイル名固定かつ必須。

実際には、ansible-playbookコマンドで、PlayBookのパスを絶対パスで指定する場合は、どのような構成でも問題ないかも。
適切に切り分けられたroleはplaybookの再利用性も高めてくれます。

=========================================================================
■ansible-playbookkコマンドの実行
ansible-playbook -i <インベントリファイルのパス> <PlayBookのパス>

例：
# cd /etc/ansible
# ansible-playbook -i hosts site.yml


<主なオプション>
-i                     インベントリファイルのパスを指定する
-e                     パラメータを渡す

                       例１：
                       -e "xxx=yes"

                       playbook:
                       "{{ xxx }}"でplaybookで変数取得可能。


                       例２：JSONでも渡せる
                       -e '{ "foo":"FOO", "fruits":["apple", "cherry", "orange"] }')

                       playbook:
                       - name: show param foo
                         debug: msg="{{ foo }}"

                       - name: show param fruits
                         debug: msg="{{ item }}"
                         with_items: "{{ fruits }}"

--list-task            実行されるタスクを確認する
--list-hosts           コマンド実行時に対象となるホスト名が表示される
--syntax-check         playbookの構文チェック(対象のplaybookのみであり、include,importされるものは対象でなく、
                       インベントリファイルも対象でないため意外と使う場面が謎)
--check                ドライラン。処理が成功したらこうなるよという変化を表示してくれる。
                       ドライランは実際の処理の成功を保証するものではないことに注意。
                       (実際に実行してみたらアクセス権限に問題があって無理でしたーとかがある。)
-v                     実行結果をより詳細に表示してくれる。vの数が多くなるほど詳細に(限界は-vvv)



=========================================================================
■YAMLの基本

先頭行は`---`必須


主に次の3つの組み合わせでデータを表現します。

1.配列    （Pythonでいうリスト）
2.ハッシュ（Pythonでいう辞書）
3.スカラー（文字列、数値、真偽値など）


--------------------------------
書き方  (2通りあり、混在も可能）
--------------------------------
1.ブロックスタイル
  インデントを使って構造を表す書き方。タブ文字は使えない。
  例：
  - aaa
  -
    - 123
    - 456
  bbb: 999
  - ccc

2.フロースタイル
  {}や[]を使って構造を表す書き方。つまりJSONと同じ。1行にまとめて書くことも可能。
  例：
  [aaa,[123, 456], {bbb: 999}, ccc]


---------
コメント
---------
シェルスクリプトと同じで 「#」で始める。


---------------------
スカラーとデータ型
---------------------
decimal1:  123                           # 整数 (10 進数)
decimal2:  1,234,567,890                 # 整数 (10 進数)
octal:     0644                          # 整数 (8 進数)
hexa:      0xFF                          # 整数 (16 進数)
float1:    0.05                          # 浮動小数点
bool1:     true                          # 真
bool2:     yes                           # 真
bool3:     on                            # 真
bool4:     false                         # 偽
bool5:     no                            # 偽
bool6:     off                           # 偽
null1:     ~                             # Null 値
null2:     null                          # Null 値
date:      2005-01-01                    # 日付
stamp:     2005-01-01 00:00:00 +09:00    # タイムスタンプ
str1:      'true'                        # 文字列
str2:      "2005"                        # 文字列


---------------------
アンカーとエイリアス
---------------------
データに「&name」で印をつけ、「*name」で参照することができます。
前者をアンカー (Anchor)、後者をエイリアス (Alias) といいます。



=========================================================================
■インベントリの基本

グループは階層化できる

例：
-----------------------------
server01

[web_servers]
webserver01
webserver02

[db_servers]
dbserver01
dbserver02

[web_db_servers:children]
webservers
dbservers
-----------------------------

このようなインベントリファイルがあった場合、以下のようになる。

all グループ
  ungrouped グループ
    server01
  web_db_servers グループ
    web_servers グループ
      webserver01
      webserver02
    db_servers グループ
      dbserver01
      dbserver02


=========================================================================
■PlayBookの基本

---------
予約語
---------
https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#


---------
基本構造
---------

play領域とtask領域から成り立つ。play領域はtask領域を含む。
他にも、role領域とblock領域があり、それぞれ使える予約語が異なる。
task領域には具体的な処理を記述する。
play領域の先頭でリモートホストで実行するユーザーだったり、対象のホスト(通常は後述のインベントリファイル内で
定義したグループ名を記載)だったりを指定する。

例：
--------------------------------
---
- name: 説明コメント
  host: web_servers                ※インベントリファイルのグループを指定
  become: yes

  tasks:                           ※task領域
    - name: 説明コメント
      yum: …                      ※モジュール(タスク1つにつき、1つまで)

  roles:
    - common                       ※role領域

  block:                           ※block領域 (関連するタスクをグルーピング)
    - 
--------------------------------




----------------------------
他のPlayBookをインクルード
----------------------------
---
- include: webservers.yml
- include: dbservers.yml




------
変数
------

変数名に文字・数字・アンダースコアを使うことができる。
ただし、変数名の先頭は文字から始まり、先頭および末尾に"__"(アンダースコア2つ)を使うことはできない。

変数の参照は、{{ <変数名> }} とする。


ハッシュ型の変数
<変数名>
  <キー>: <値>
  <キー>: <値>

例：
foo:
  field1: "one"
  field2: "two"

foo['field1']     # 参照


----------------------------
コマンドを実行する
----------------------------
shellモジュールを用いる

例：
- name: generate passwod salt for new user
  shell: "cat /dev/urandom | tr -dc '[:alnum:]' | head -c 20"
  register: salt
  ignore_errors: true
  changed_when: false


----------------------------
コマンド実行結果を取得する
----------------------------

標準出力を取得する
register_val.stdout

標準出力結果に文字が含まれているかで分岐する。findで-1は存在しない場合を表す。
when: register_val.stdout.find('test') != -1

コマンドが成功したか、失敗したかで分岐する
when: register_val | success
when: register_val | failed



-------------------
デバッグ出力
-------------------
- debug: msg="XXXX"




-----------------------------------------------
設定ファイルが変更されたタイミングで再起動
-----------------------------------------------
/etc/httpd/httpd-proxy.confが変更されたらapacheを再起動する。
notify:の後の文字と、handlers/main.ymlのnameの文字が一致している必要がある。


handlers/main.yml
---
- name: restart httpd
  service: name=httpd state=restarted


tasks/httpd.yml
- name: copy httpd-proxy.conf
  template: src=httpd-proxy.conf dest=/etc/httpd/conf.d/
  notify: restart httpd



---------------------
ディレクトリを作成
---------------------
- name: create springboot root directory
  file: path=/home/cmp/app
        state=directory
        owner=cmp
        group=cmp
        mode=0755


----------------------
ファイルの存在を確認
----------------------
/etc/init.d/kdumpというファイルが存在しない場合、エラーメッセージを表示する

- name: stat /etc/init.d/kdump
  stat: path=/etc/init.d/kdump
  register: kdump

- name: install check kdump
  fail: msg="kdump(kexec-tool) is not installed."
  when: not kdump.stat.exists



------------------
環境変数を取得
------------------
lookupを使うことで実現できます。
以下はec2を起動するときの例でprivate ipやimage idを環境変数から取得しています。

  tasks:
    - name: launch ec2 instance
      ec2:
        private_ip: "{{ lookup('env', 'PRIVATE_IP') }}"
        key_name: LegoTestKeyPair
        group: LegoTestInstanceSecurityGroup
        instance_type: "{{ lookup('env', 'INSTANCE_TYPE') }}"
        image: "{{ lookup('env', 'IMAGE_ID') }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          Name: xxxxxxxx
        monitoring: no
        vpc_subnet_id: subnet-xxxxxxx
        assign_public_ip: yes
        region: ap-northeast-1



---------------------------
よく出てくるディレクティブ
---------------------------
hosts               インベントリファイルに記載されている対象のホストまたはグループを指定する
                    カンマ区切りでも、YAML のリスト指定でも大丈夫です
become              yesを指定すると、リモートホストで sudo (default) を使って実行する
                    デフォルトでは root としての実行ですが、別途 become_user を指定することで
                    別のユーザーとして実行することも可能です
tasks               実行する処理を定義します
                    1つのタスクに複数のモジュールを記載するとエラーになる。
                     →エラー例：ERROR! conflicting action statements: shell, debug
gather_facts        noを指定すると、実行時に対象ホストの情報を収集しなくなるため、タスク実行までの時間が少し短縮される
when                条件分岐用
                    真になる場合のみタスクが実行される
                    複数の条件を書ける(リストで書く)
with_items          ループ処理に使う。
                    例：
                    - name: ディレクトリの作成
                      file: path=/root/{{ item }} state=directory
                      with_items:
                        - test1
                        - test2
                        - test3





=========================================================================
■参考
https://qiita.com/WisteriaWave/items/abbe77b32b490fc8ffa2
https://qiita.com/WisteriaWave/items/0e5dda7ddc13b22188c7
http://c.itdo.jp/technical-information/ansible/ansible-tutorial/#heading3
https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
https://magazine.rubyist.net/articles/0009/0009-YAML.html
https://qiita.com/sts-sd2/items/626884053e7df6a2e41d
https://qiita.com/uzresk/items/1aa391eef232766bf817
https://lab.tricorn.co.jp/kamo/4836
https://qiita.com/comefigo/items/a37b47f394f0a9a3e518
https://knowledge.sakura.ad.jp/3084/
https://yteraoka.github.io/ansible-tutorial/#simple-playbook
http://tdoc.info/ansible-book/ansible-sample.pdf
