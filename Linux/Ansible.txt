Ansible memo   2020.5.4


簡単にまとめると、複数のノードに同じことをやらせる場合に便利な自動化支援フレームワーク。

例えば、100台のサーバに手作業で同じこと（httpdインストールだったり）をさせる場合、
Ansibleでその手作業の内容をPlayBookに書いておけば、保守も楽だし、手順書も作らなくても済むかも。

インストール手順は、VirtualBox.txtを参照。

=========================================================================
■主な用語

PlayBook (プレイブック)
タスクを組み立てて自動化を作り上げるYAML形式で書かれるファイルのことを言います。
インベントリに記載されたグループ（ノード）を指定し、タスクを実行順に記載していく。
拡張子は「yml」
タスクごとにファイルを分割することもできる。


Inventory (インベントリ)
タスクを実行するノードを定義したファイル。iniファイル形式。
インベントリファイルには拡張子がつきません。
ノードはグループ化できる。


YAML (ヤムル)
配列やハッシュで構造化されたデータを表現するためのフォーマットです。 
XMLと比べると汎用性に欠けますが、その分シンプルで人間にも読みやすい データ形式です。 
配列を値に持つハッシュ、ハッシュの配列の配列など、ネストしたデータを扱う場合、
インデント（一般的には半角スペース2個）の深さで階層の深さを表現します。 


モジュール
作業（タスク）を部品化したものです。
Ansibleには標準で2,000近くのモジュールがありますが、自分で作成することも出来ます。
モジュールに与えられたパラメータは変数として保存できる為、後から上書きすることも出来ます。


Role (ロール)
PlayBookで読み込む作業単位。


=========================================================================
■基本的なディレクトリ構成例

/etc/ansible/
    ├-- ansible.cfg                        ※Ansible設定ファイル
    ├-- hosts                              ※インベントリファイル。ファイル名は自由に決めてよい。
    ├-- roles                              ※Role群を配置するディレクトリ(ディレクトリ名は固定)
    │   └-- httpd                         ※Role。ロール名は自由に決めてよい。
    │      ├-- handlers                   ※tasks/main.ymlの実行が終わったあとに1回だけ実行されるtaskを格納する(任意)
    │      │ └-- main.yml
    │      ├-- defaults                   ※デフォルト変数ファイルを格納する(任意)
    │      ├-- files                      ※デプロイするファイルを格納する(任意)
    │      ├-- meta                       ※メタデータ定義を格納する(任意)
    │      ├-- tasks                      ※roleの核となるtaskを格納する(必須)
    │      │ └-- main.yml
    │      ├-- templates                  ※デプロイするテンプレートファイルを格納する(任意)
    │      │ └-- httpd.conf.j2
    │      └- vars                        ※変数ファイルを格納する(任意)
    │         └-- main.yml
    └-- site.yml                           ※ansible-playbookコマンドに指定するPlayBook。ファイル名は自由に決めてよい。
                                              rolesディレクトリの各ロールを読み込み実行するような記述にする。

main.ymlはファイル名固定かつ必須。

実際には、ansible-playbookコマンドで、PlayBookのパスを絶対パスで指定する場合は、どのような構成でも問題ないかも。

=========================================================================
■ansible-playbookkコマンドの実行
ansible-playbook -i <インベントリファイルのパス> <PlayBookのパス>

例：
# cd /etc/ansible
# ansible-playbook -i hosts site.yml


<主なオプション>
--list-task            実行されるタスクを確認する
--list-hosts           コマンド実行時に対象となるホスト名が表示される
--syntax-check         playbookの構文チェック(対象のplaybookのみであり、include,importされるものは対象でなく、
                       インベントリファイルも対象でないため意外と使う場面が謎)
--check                ドライラン。処理が成功したらこうなるよという変化を表示してくれる。
                       ドライランは実際の処理の成功を保証するものではないことに注意。
                       (実際に実行してみたらアクセス権限に問題があって無理でしたーとかがある。)
-v                     実行結果をより詳細に表示してくれる。vの数が多くなるほど詳細に(限界は-vvv)



=========================================================================
■YAMLの基本

主に次の3つの組み合わせでデータを表現します。

1.配列    （Pythonでいうリスト）
2.ハッシュ（Pythonでいう辞書）
3.スカラー（文字列、数値、真偽値など）


--------------------------------
書き方  (2通りあり、混在も可能）
--------------------------------
1.ブロックスタイル
  インデントを使って構造を表す書き方。タブ文字は使えない。
  例：
  - aaa
  -
    - 123
    - 456
  bbb: 999
  - ccc

2.フロースタイル
  {}や[]を使って構造を表す書き方。つまりJSONと同じ。1行にまとめて書くことも可能。
  例：
  [aaa,[123, 456], {bbb: 999}, ccc]


---------
コメント
---------
シェルスクリプトと同じで 「#」で始める。


---------------------
スカラーとデータ型
---------------------
decimal1:  123                           # 整数 (10 進数)
decimal2:  1,234,567,890                 # 整数 (10 進数)
octal:     0644                          # 整数 (8 進数)
hexa:      0xFF                          # 整数 (16 進数)
float1:    0.05                          # 浮動小数点
bool1:     true                          # 真
bool2:     yes                           # 真
bool3:     on                            # 真
bool4:     false                         # 偽
bool5:     no                            # 偽
bool6:     off                           # 偽
null1:     ~                             # Null 値
null2:     null                          # Null 値
date:      2005-01-01                    # 日付
stamp:     2005-01-01 00:00:00 +09:00    # タイムスタンプ
str1:      'true'                        # 文字列
str2:      "2005"                        # 文字列


---------------------
アンカーとエイリアス
---------------------
データに「&name」で印をつけ、「*name」で参照することができます。
前者をアンカー (Anchor)、後者をエイリアス (Alias) といいます。



=========================================================================
■インベントリの基本

グループは階層化できる

例：
-----------------------------
server01

[web_servers]
webserver01
webserver02

[db_servers]
dbserver01
dbserver02

[web_db_servers:children]
webservers
dbservers
-----------------------------

このようなインベントリファイルがあった場合、以下のようになる。

all グループ
  ungrouped グループ
    server01
  web_db_servers グループ
    web_servers グループ
      webserver01
      webserver02
    db_servers グループ
      dbserver01
      dbserver02


=========================================================================
■PlayBookの基本

---------
基本構造
---------

play領域とtask領域から成り立つ。play領域はtask領域を含む。
task領域には具体的な処理を記述する。
play領域の先頭でリモートホストで実行するユーザーだったり、対象のホスト(通常は後述のインベントリファイル内で
定義したグループ名を記載)だったりを指定する。

例：
--------------------------------
- name: 説明コメント
  host: web_servers                ※インベントリファイルのグループを指定
  become: yes
                                   ※task領域
  tasks:
    - name: 説明コメント
      yum: …

--------------------------------



------
変数
------

変数名に文字・数字・アンダースコアを使うことができる。
ただし、変数名の先頭は文字から始まり、先頭および末尾に"__"(アンダースコア2つ)を使うことはできない。

変数の参照は、{{ <変数名> }} とする。


ハッシュ型の変数
<変数名>
  <キー>: <値>
  <キー>: <値>

例：
foo:
  field1: "one"
  field2: "two"

foo['field1']     # 参照






=========================================================================
■参考
https://qiita.com/WisteriaWave/items/abbe77b32b490fc8ffa2
https://qiita.com/WisteriaWave/items/0e5dda7ddc13b22188c7
http://c.itdo.jp/technical-information/ansible/ansible-tutorial/#heading3
https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
https://magazine.rubyist.net/articles/0009/0009-YAML.html
https://qiita.com/sts-sd2/items/626884053e7df6a2e41d
