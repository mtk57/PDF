CentOS 7 に入れるOSS メモ


==============================================================
■ Python3.6

# yum install -y https://centos7.iuscommunity.org/ius-release.rpm
# yum search python36
メタデータの期限切れの最終確認: 0:01:15 時間前の 2020年04月24日 07時26分12秒 に実施しました。
================================================================================ 名前 完全一致: python36 ================================================================================
python36.x86_64 : Interpreter of the Python programming language
================================================================================== 名前 一致: python36 ==================================================================================
python36-debug.x86_64 : Debug version of the Python runtime
python36-devel.x86_64 : Libraries and header files needed for Python development
python36-rpm-macros.noarch : RPM macros for building RPMs with Python 3.6

# yum install python36
メタデータの期限切れの最終確認: 0:02:30 時間前の 2020年04月24日 07時26分12秒 に実施しました。
依存関係が解決しました。
=========================================================================================================================================================================================
 パッケージ                                   アーキテクチャー                 バージョン                                                      リポジトリー                        サイズ
=========================================================================================================================================================================================
インストール:
 python36                                     x86_64                           3.6.8-2.module_el8.1.0+245+c39af44f                             AppStream                            19 k
依存関係のインストール:
 python3-pip                                  noarch                           9.0.3-15.el8                                                    AppStream                            19 k
 python3-setuptools                           noarch                           39.2.0-5.el8                                                    BaseOS                              162 k
モジュールストリームの有効化:
 python36                                                                      3.6

トランザクションの概要
=========================================================================================================================================================================================
インストール  3 パッケージ

ダウンロードサイズの合計: 201 k
インストール済みのサイズ: 466 k
これでよろしいですか? [y/N]: y
パッケージのダウンロード:
(1/3): python36-3.6.8-2.module_el8.1.0+245+c39af44f.x86_64.rpm                                                                                            48 kB/s |  19 kB     00:00
(2/3): python3-pip-9.0.3-15.el8.noarch.rpm                                                                                                                41 kB/s |  19 kB     00:00
[MIRROR] python3-setuptools-39.2.0-5.el8.noarch.rpm: Curl error (28): Timeout was reached for http://ftp.nara.wide.ad.jp/pub/Linux/centos/8.1.1911/BaseOS/x86_64/os/Packages/python3-setuptools-39.2.0-5.el8.noarch.rpm [Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds]
(3/3): python3-setuptools-39.2.0-5.el8.noarch.rpm                                                                                                        3.0 kB/s | 162 kB     00:54
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
合計                                                                                                                                                     3.5 kB/s | 201 kB     00:57
警告: /var/cache/dnf/AppStream-a520ed22b0a8a736/packages/python3-pip-9.0.3-15.el8.noarch.rpm: ヘッダー V3 RSA/SHA256 Signature、鍵 ID 8483c65d: NOKEY
CentOS-8 - AppStream                                                                                                                                     240 kB/s | 1.6 kB     00:00
GPG 鍵 0x8483C65D をインポート中:
 Userid     : "CentOS (CentOS Official Signing Key) <security@centos.org>"
 Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial
これでよろしいですか? [y/N]: y
鍵のインポートに成功しました
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                                                                                                                                 1/1
  インストール中   : python3-setuptools-39.2.0-5.el8.noarch                                                                                                                          1/3
  インストール中   : python36-3.6.8-2.module_el8.1.0+245+c39af44f.x86_64                                                                                                             2/3
  scriptletの実行中: python36-3.6.8-2.module_el8.1.0+245+c39af44f.x86_64                                                                                                             2/3
  インストール中   : python3-pip-9.0.3-15.el8.noarch                                                                                                                                 3/3
  scriptletの実行中: python3-pip-9.0.3-15.el8.noarch                                                                                                                                 3/3
  検証             : python3-pip-9.0.3-15.el8.noarch                                                                                                                                 1/3
  検証             : python36-3.6.8-2.module_el8.1.0+245+c39af44f.x86_64                                                                                                             2/3
  検証             : python3-setuptools-39.2.0-5.el8.noarch                                                                                                                          3/3

インストール済み:
  python36-3.6.8-2.module_el8.1.0+245+c39af44f.x86_64                     python3-pip-9.0.3-15.el8.noarch                     python3-setuptools-39.2.0-5.el8.noarch

完了しました!


==============================================================
■ GlusterFS 7

入れるのは3つ
1.centos-release-gluster
2.python3-pyxattr
  →glusterfs-serverが使っている
3.glusterfs-server



# yum install centos-release-gluster
メタデータの期限切れの最終確認: 0:08:50 時間前の 2020年04月24日 07時29分50秒 に実施しました。
依存関係が解決しました。
=========================================================================================================================================================================================
 パッケージ                                                   アーキテクチャー                      バージョン                               リポジトリー                          サイズ
=========================================================================================================================================================================================
インストール:
 centos-release-gluster7                                      noarch                                1.0-2.el8                                extras                                9.5 k
依存関係のインストール:
 centos-release-storage-common                                noarch                                2-2.el8                                  extras                                9.4 k

トランザクションの概要
=========================================================================================================================================================================================
インストール  2 パッケージ

ダウンロードサイズの合計: 19 k
インストール済みのサイズ: 2.4 k
これでよろしいですか? [y/N]: y
パッケージのダウンロード:
(1/2): centos-release-storage-common-2-2.el8.noarch.rpm                                                                                                  138 kB/s | 9.4 kB     00:00
(2/2): centos-release-gluster7-1.0-2.el8.noarch.rpm                                                                                                      131 kB/s | 9.5 kB     00:00
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
合計                                                                                                                                                      18 kB/s |  19 kB     00:01
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                                                                                                                                 1/1
  インストール中   : centos-release-storage-common-2-2.el8.noarch                                                                                                                    1/2
  インストール中   : centos-release-gluster7-1.0-2.el8.noarch                                                                                                                        2/2
  scriptletの実行中: centos-release-gluster7-1.0-2.el8.noarch                                                                                                                        2/2
  検証             : centos-release-gluster7-1.0-2.el8.noarch                                                                                                                        1/2
  検証             : centos-release-storage-common-2-2.el8.noarch                                                                                                                    2/2

インストール済み:
  centos-release-gluster7-1.0-2.el8.noarch                                                  centos-release-storage-common-2-2.el8.noarch

完了しました!






# dnf --enablerepo=PowerTools install python3-pyxattr
CentOS-8 - PowerTools                           148 kB/s | 2.0 MB     00:13
メタデータの期限切れの最終確認: 0:00:08 時間前の 2020年04月24日 08時25分56秒 に                                                                                                          実施しました。
依存関係が解決しました。
================================================================================
 パッケージ            Arch         バージョン           リポジトリー     サイズ
================================================================================
インストール:
 python3-pyxattr       x86_64       0.5.3-18.el8         PowerTools        36 k

トランザクションの概要
================================================================================
インストール  1 パッケージ

ダウンロードサイズの合計: 36 k
インストール済みのサイズ: 64 k
これでよろしいですか? [y/N]: y
パッケージのダウンロード:
python3-pyxattr-0.5.3-18.el8.x86_64.rpm         183 kB/s |  36 kB     00:00
--------------------------------------------------------------------------------
合計                                             39 kB/s |  36 kB     00:00
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                        1/1
  インストール中   : python3-pyxattr-0.5.3-18.el8.x86_64                    1/1
  scriptletの実行中: python3-pyxattr-0.5.3-18.el8.x86_64                    1/1
  検証             : python3-pyxattr-0.5.3-18.el8.x86_64                    1/1

インストール済み:
  python3-pyxattr-0.5.3-18.el8.x86_64

完了しました!





# yum install -y glusterfs-server
メタデータの期限切れの最終確認: 0:47:08 時間前の 2020年04月24日 07時39分09秒 に                                                                                                          実施しました。
依存関係が解決しました。
================================================================================
 パッケージ                  Arch      バージョン      リポジトリー       サイズ
================================================================================
インストール:
 glusterfs-server            x86_64    7.5-1.el8       centos-gluster7    1.4 M
アップグレード:
 glusterfs                   x86_64    7.5-1.el8       centos-gluster7    688 k
 glusterfs-api               x86_64    7.5-1.el8       centos-gluster7    123 k
 glusterfs-cli               x86_64    7.5-1.el8       centos-gluster7    215 k
 glusterfs-client-xlators    x86_64    7.5-1.el8       centos-gluster7    888 k
 glusterfs-fuse              x86_64    7.5-1.el8       centos-gluster7    170 k
 glusterfs-libs              x86_64    7.5-1.el8       centos-gluster7    445 k

トランザクションの概要
================================================================================
インストール    1 パッケージ
アップグレード  6 パッケージ

ダウンロードサイズの合計: 3.8 M
パッケージのダウンロード:
(1/7): glusterfs-api-7.5-1.el8.x86_64.rpm       482 kB/s | 123 kB     00:00
(2/7): glusterfs-cli-7.5-1.el8.x86_64.rpm       643 kB/s | 215 kB     00:00
(3/7): glusterfs-client-xlators-7.5-1.el8.x86_6 620 kB/s | 888 kB     00:01
(4/7): glusterfs-7.5-1.el8.x86_64.rpm           338 kB/s | 688 kB     00:02
(5/7): glusterfs-fuse-7.5-1.el8.x86_64.rpm      372 kB/s | 170 kB     00:00
(6/7): glusterfs-libs-7.5-1.el8.x86_64.rpm      213 kB/s | 445 kB     00:02
(7/7): glusterfs-server-7.5-1.el8.x86_64.rpm    306 kB/s | 1.4 MB     00:04
--------------------------------------------------------------------------------
合計                                            795 kB/s | 3.8 MB     00:04
警告: /var/cache/dnf/centos-gluster7-997b5572243b3033/packages/glusterfs-server-                                                                                                         7.5-1.el8.x86_64.rpm: ヘッダー V4 RSA/SHA1 Signature、鍵 ID e451e5b5: NOKEY
CentOS-8 - Gluster 7                            137 kB/s | 1.0 kB     00:00
GPG 鍵 0xE451E5B5 をインポート中:
 Userid     : "CentOS Storage SIG (http://wiki.centos.org/SpecialInterestGroup/S                                                                                                         torage) <security@centos.org>"
 Fingerprint: 7412 9C0B 173B 071A 3775 951A D4A2 E50B E451 E5B5
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-Storage
鍵のインポートに成功しました
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                        1/1
  アップグレード中 : glusterfs-libs-7.5-1.el8.x86_64                       1/13
  scriptletの実行中: glusterfs-7.5-1.el8.x86_64                            2/13
  アップグレード中 : glusterfs-7.5-1.el8.x86_64                            2/13
  scriptletの実行中: glusterfs-7.5-1.el8.x86_64                            2/13
  アップグレード中 : glusterfs-client-xlators-7.5-1.el8.x86_64             3/13
  アップグレード中 : glusterfs-api-7.5-1.el8.x86_64                        4/13
  アップグレード中 : glusterfs-fuse-7.5-1.el8.x86_64                       5/13
  アップグレード中 : glusterfs-cli-7.5-1.el8.x86_64                        6/13
  インストール中   : glusterfs-server-7.5-1.el8.x86_64                     7/13
  scriptletの実行中: glusterfs-server-7.5-1.el8.x86_64                     7/13
  整理             : glusterfs-fuse-6.0-15.el8.x86_64                      8/13
  整理             : glusterfs-api-6.0-15.el8.x86_64                       9/13
  整理             : glusterfs-6.0-15.el8.x86_64                          10/13
  scriptletの実行中: glusterfs-6.0-15.el8.x86_64                          10/13
  整理             : glusterfs-client-xlators-6.0-15.el8.x86_64           11/13
  整理             : glusterfs-cli-6.0-15.el8.x86_64                      12/13
  整理             : glusterfs-libs-6.0-15.el8.x86_64                     13/13
  scriptletの実行中: glusterfs-libs-6.0-15.el8.x86_64                     13/13
  検証             : glusterfs-server-7.5-1.el8.x86_64                     1/13
  検証             : glusterfs-7.5-1.el8.x86_64                            2/13
  検証             : glusterfs-6.0-15.el8.x86_64                           3/13
  検証             : glusterfs-api-7.5-1.el8.x86_64                        4/13
  検証             : glusterfs-api-6.0-15.el8.x86_64                       5/13
  検証             : glusterfs-cli-7.5-1.el8.x86_64                        6/13
  検証             : glusterfs-cli-6.0-15.el8.x86_64                       7/13
  検証             : glusterfs-client-xlators-7.5-1.el8.x86_64             8/13
  検証             : glusterfs-client-xlators-6.0-15.el8.x86_64            9/13
  検証             : glusterfs-fuse-7.5-1.el8.x86_64                      10/13
  検証             : glusterfs-fuse-6.0-15.el8.x86_64                     11/13
  検証             : glusterfs-libs-7.5-1.el8.x86_64                      12/13
  検証             : glusterfs-libs-6.0-15.el8.x86_64                     13/13

アップグレード済み:
  glusterfs-7.5-1.el8.x86_64        glusterfs-api-7.5-1.el8.x86_64
  glusterfs-cli-7.5-1.el8.x86_64    glusterfs-client-xlators-7.5-1.el8.x86_64
  glusterfs-fuse-7.5-1.el8.x86_64   glusterfs-libs-7.5-1.el8.x86_64

インストール済み:
  glusterfs-server-7.5-1.el8.x86_64

完了しました!



# systemctl start glusterd


==============================================================
■ boto3
   ※PythonからAWS(Amazon Web Service)を操作するためのモジュール


# pip3 install boto3
WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.
Collecting boto3
  Downloading https://files.pythonhosted.org/packages/8c/b9/d9da1f57c0535afacbdf20f3f0ce0c6cdae1b8adab0fd48459c6d72222e5/boto3-1.12.46-py2.py3-none-any.whl (128kB)
    100% |????????????????????????????????| 133kB 1.0MB/s
Collecting botocore<1.16.0,>=1.15.46 (from boto3)
  Downloading https://files.pythonhosted.org/packages/6c/21/d015b86c8fa291f78e8fe7d7cf0a60645989efa5db5e8302e2b7ccf9539a/botocore-1.15.46-py2.py3-none-any.whl (6.1MB)
    100% |????????????????????????????????| 6.1MB 114kB/s
Collecting s3transfer<0.4.0,>=0.3.0 (from boto3)
  Downloading https://files.pythonhosted.org/packages/69/79/e6afb3d8b0b4e96cefbdc690f741d7dd24547ff1f94240c997a26fa908d3/s3transfer-0.3.3-py2.py3-none-any.whl (69kB)
    100% |????????????????????????????????| 71kB 288kB/s
Collecting jmespath<1.0.0,>=0.7.1 (from boto3)
  Downloading https://files.pythonhosted.org/packages/a3/43/1e939e1fcd87b827fe192d0c9fc25b48c5b3368902bfb913de7754b0dc03/jmespath-0.9.5-py2.py3-none-any.whl
Collecting docutils<0.16,>=0.10 (from botocore<1.16.0,>=1.15.46->boto3)
  Downloading https://files.pythonhosted.org/packages/22/cd/a6aa959dca619918ccb55023b4cb151949c64d4d5d55b3f4ffd7eee0c6e8/docutils-0.15.2-py3-none-any.whl (547kB)
    100% |????????????????????????????????| 552kB 241kB/s
Collecting urllib3<1.26,>=1.20; python_version != "3.4" (from botocore<1.16.0,>=1.15.46->boto3)
  Downloading https://files.pythonhosted.org/packages/e1/e5/df302e8017440f111c11cc41a6b432838672f5a70aa29227bf58149dc72f/urllib3-1.25.9-py2.py3-none-any.whl (126kB)
    100% |????????????????????????????????| 133kB 549kB/s
Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/lib/python3.6/site-packages (from botocore<1.16.0,>=1.15.46->boto3)
Requirement already satisfied: six>=1.5 in /usr/lib/python3.6/site-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.16.0,>=1.15.46->boto3)
Installing collected packages: docutils, urllib3, jmespath, botocore, s3transfer, boto3
Successfully installed boto3-1.12.46 botocore-1.15.46 docutils-0.15.2 jmespath-0.9.5 s3transfer-0.3.3 urllib3-1.25.9


==============================================================
■ WinSCP

◎隠しフォルダ・ファイルを表示
CTRL + ALT + H


==============================================================
■ Samba (CIFS)

Linux上でWindowsのネットワーク機能を実現するソフトウェアです。
Sambaサーバが稼働していれば、Linux上のディレクトリに、Windowsからアクセスできる。

<手順概要>
1.sambaをインストール
2.Firewallでsambaを許可
3.sambaの設定ファイルを変更   (/etc/samba/smb.conf)
4.公開ディレクトリを作成      (/home/share/)
5.アクセス用ユーザーを作成    (rem-test01)
6.SELinuxを無効化             (/etc/sysconfig/selinux)
7.samba再起動                 (systemctl restart smb nmb)
8.Windowsから公開ディレクトリにアクセス


<前提条件>
ホスト名：node1


<手順>

1.sambaをインストール
# dnf -y install samba

--------------------------------------------------------
インストール後の確認
--------------------------------------------------------
# dnf list installed samba*
インストール済みパッケージ
samba.x86_64                  4.10.4-101.el8_1    @BaseOS
samba-client.x86_64           4.10.4-101.el8_1    @BaseOS
samba-client-libs.x86_64      4.10.4-101.el8_1    @BaseOS
samba-common.noarch           4.10.4-101.el8_1    @BaseOS
samba-common-libs.x86_64      4.10.4-101.el8_1    @BaseOS
samba-common-tools.x86_64     4.10.4-101.el8_1    @BaseOS
samba-libs.x86_64             4.10.4-101.el8_1    @BaseOS

# which smbd nmbd
/usr/sbin/smbd
/usr/sbin/nmbd


--------------------------------------------------------
Samba起動の確認 (smbd, nmbdが開始できることを確認する)
--------------------------------------------------------
# systemctl start smb nmb
# systemctl status smb nmb
● smb.service - Samba SMB Daemon
   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)
   Active: active (running) since Sat 2020-05-02 19:11:40 JST; 5s ago
     Docs: man:smbd(8)
           man:samba(7)
           man:smb.conf(5)
 Main PID: 30044 (smbd)
   Status: "smbd: ready to serve connections..."
    Tasks: 4 (limit: 5035)
   Memory: 11.6M
   CGroup: /system.slice/smb.service
           tq30044 /usr/sbin/smbd --foreground --no-process-group
           tq30047 /usr/sbin/smbd --foreground --no-process-group
           tq30048 /usr/sbin/smbd --foreground --no-process-group
           mq30049 /usr/sbin/smbd --foreground --no-process-group

 5月 02 19:11:40 localhost.localdomain systemd[1]: Starting Samba SMB Daemon...
 5月 02 19:11:40 localhost.localdomain smbd[30044]: [2020/05/02 19:11:40.562169,  0] ../../lib/util/become_daemon.c:136(daemon_ready)
 5月 02 19:11:40 localhost.localdomain systemd[1]: Started Samba SMB Daemon.
 5月 02 19:11:40 localhost.localdomain smbd[30044]:   daemon_ready: daemon 'smbd' finished starting up and ready to serve connections

● nmb.service - Samba NMB Daemon
   Loaded: loaded (/usr/lib/systemd/system/nmb.service; disabled; vendor preset: disabled)
   Active: active (running) since Sat 2020-05-02 19:11:40 JST; 5s ago
     Docs: man:nmbd(8)
           man:samba(7)
           man:smb.conf(5)
 Main PID: 30045 (nmbd)
   Status: "nmbd: ready to serve connections..."
    Tasks: 1 (limit: 5035)
   Memory: 4.1M
   CGroup: /system.slice/nmb.service
           mq30045 /usr/sbin/nmbd --foreground --no-process-group

 5月 02 19:11:40 localhost.localdomain systemd[1]: Starting Samba NMB Daemon...
 5月 02 19:11:40 localhost.localdomain nmbd[30045]: [2020/05/02 19:11:40.495802,  0] ../../lib/util/become_daemon.c:136(daemon_ready)
 5月 02 19:11:40 localhost.localdomain systemd[1]: Started Samba NMB Daemon.
 5月 02 19:11:40 localhost.localdomain nmbd[30045]:   daemon_ready: daemon 'nmbd' finished starting up and ready to serve connections


--------------------------------------------------------
Samba自動起動の設定 （OS再起動後もsmbd, nmbdが自動起動させるため）
--------------------------------------------------------
[root@localhost ~]# systemctl enable smb nmb
Created symlink /etc/systemd/system/multi-user.target.wants/smb.service → /usr/lib/systemd/system/smb.service.
Created symlink /etc/systemd/system/multi-user.target.wants/nmb.service → /usr/lib/systemd/system/nmb.service.


2.Firewallでsambaを許可

------------------
現状の設定を確認
------------------
# firewall-cmd --list-all
public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3
  sources:
  services: cockpit dhcpv6-client glusterfs ssh       ※sambaサービスは許可されていない
  ports:
  protocols:
  masquerade: no
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:


---------------------
sambaサービスを許可
---------------------
# firewall-cmd --add-service=samba --permanent
success


---------------------
設定をリロード
---------------------
# firewall-cmd --reload
success


---------------------
再度、状態を確認
---------------------
# firewall-cmd --list-all
public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3
  sources:
  services: cockpit dhcpv6-client glusterfs samba ssh         ※sambaサービスが追加されている
  ports:
  protocols:
  masquerade: no
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:



3.sambaの設定ファイルを変更

---------------------------
設定ファイルをバックアップ
---------------------------
# cd /etc/samba
# cp -p smb.conf smb.conf.org


---------------------------
以下の内容に書き換える (★は環境により変わる)
---------------------------
～～～～～～～～～～～～～～～～～～～～～～～～～ここから
# See smb.conf.example for a more detailed config file or
# read the smb.conf manpage.
# Run 'testparm' to verify the config is correct after
# you modified it.
 
[global]
workgroup = WORKGROUP
server string = SAMBA SERVER Version %v
netbios name = node1                       ★
security = user
 
passdb backend = tdbsam
 
dos charset = CP932
wins support = yes
# printing = cups
# printcap name = cups
load printers = no
disable spoolss = yes
# cups options = raw
 
[Share]
comment = Share Folder for All Users
path = /home/share/
browsable = yes
read only = no
 
[homes]
comment = Home Directories
valid users = %S, %D%w%S
browseable = No
read only = No
inherit acls = Yes
 
#[printers]
# comment = All Printers
# path = /var/tmp
# printable = Yes
# create mask = 0600
# browseable = No
 
#[print$]
# comment = Printer Drivers
# path = /var/lib/samba/drivers
# write list = @printadmin root
# force group = @printadmin
# create mask = 0664
# directory mask = 0775
～～～～～～～～～～～～～～～～～～～～～～～～～ここまで



4.公開ディレクトリを作成

# cd /home/
# mkdir share
# chmod -R 0777 share
# chown -R nobody:nobody share
# ll
合計 0
drwxrwxrwx. 2 nobody nobody  6  5月  2 19:25 share



5.アクセス用ユーザーを作成 

# useradd rem-test01
# passwd rem-test01
ユーザー rem-test01 のパスワードを変更。
新しいパスワード: 
新しいパスワードを再入力してください: 
passwd: すべての認証トークンが正しく更新できました。


------------------------------
Windows側のユーザー属性追加  (PWは↑と同じ)
------------------------------
# pdbedit -a -u rem-test01 -f "test user01"
new password:
retype new password:
Unix username:        rem-test01
NT username:
Account Flags:        [U          ]
User SID:             S-1-5-21-3229097609-707887061-1259947667-1000
Primary Group SID:    S-1-5-21-3229097609-707887061-1259947667-513
Full Name:            test user01
Home Directory:       \\node1\rem-test01
HomeDir Drive:
Logon Script:
Profile Path:         \\node1\rem-test01\profile
Domain:               NODE1
Account desc:
Workstations:
Munged dial:
Logon time:           0
Logoff time:          木, 07  2月 2036 00:06:39 JST
Kickoff time:         木, 07  2月 2036 00:06:39 JST
Password last set:    土, 02  5月 2020 19:29:17 JST
Password can change:  土, 02  5月 2020 19:29:17 JST
Password must change: never
Last bad password   : 0
Bad password count  : 0
Logon hours         : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF



6.SELinuxを無効化

---------------------------------------------
/etc/sysconfig/selinuxの以下行を書き換える
---------------------------------------------

<書き換え前>
SELINUX=enforcing

<書き換え後>
#SELINUX=enforcing
SELINUX=disabled


-------------
OSをリブート
-------------
# reboot



7.samba再起動 (リブートしたので不要かも)

# systemctl restart smb nmb



8.Windowsから公開ディレクトリにアクセス

ここからはWindowsでの作業。


--------------------------
念の為、pingが通るか確認
--------------------------
> ping node1


----------------------------------------
エクスプローラからsambaサーバにアクセス
----------------------------------------
\\node1

→ID/PWは、rem-test01


共有ディレクトリ(share)にアクセスできれば成功。


参考：
https://www.rem-system.com/centos8-samba-install/

==============================================================
■Ansible

<インストール>
# dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
(省略)

# dnf install  --enablerepo epel-playground  ansible
(省略)

→パッケージ管理ツール(dnfやyum)を使わなくても、# pip3 install ansible
  からでも一応インストールできるが、ansibleディレクトリ（/etc/ansible/）が作成されない。(中身はほぼ空に等しいので自分で作ってもよい)
    # tree /etc/ansible/
    /etc/ansible/
    ├ ansible.cfg
    ├ hosts
    └ roles





<テスト環境>
・コントロールノード（Ansibleをインストールしているノード）：
  IP      ：192.168.11.100
  HostName：node1

・ターゲットノード：
  IP      ：192.168.11.101
  HostName：node2





<前準備>
・Ansibleは sshでターゲットノードに接続するため、パスワード無しで接続できるように、
  node1のssh公開鍵をnode2にコピーしておく必要がある。

--------------
sshの鍵を生成
--------------
# ssh-keygen       ※いろいろ入力を促されるが全てEnterでよい
(省略)

作成された鍵(公開/秘密)は、~/.ssh/ に作成される。
# pwd
/root/.ssh
# ll
合計 12
-rw------- 1 root root 2590  5月  2 20:14 id_rsa
-rw-r--r-- 1 root root  564  5月  2 20:14 id_rsa.pub
-rw-r--r-- 1 root root  176  5月  2 20:12 known_hosts

------------------------------------
authorized_keysの作成して権限を変更
------------------------------------
# cat id_rsa.pub >> authorized_keys
# chmod 600 authorized_keys


--------------
node2にコピー
--------------
# scp -pr ~/.ssh/ root@192.168.11.101:~/


-------------------------------
node2にssh(PWなし)できるか確認
-------------------------------
# ssh root@192.168.11.101








<疎通確認>
・node1からnode2へAnsibleのコマンドが実行できるか確認。

-----------------------------------
インベントリファイルにnode2を追加
-----------------------------------
# cd /etc/ansible/
# ll
合計 24
-rw-r--r-- 1 root root 19985  4月 19 06:21 ansible.cfg
-rw-r--r-- 1 root root  1016  4月 19 06:21 hosts           ※インベントリファイル
drwxr-xr-x 2 root root     6  4月 19 06:21 roles

以下を追加する。
[my_target]                           ※ターゲットグループ名。自由に決められる。
node2 ansible_host=192.168.11.101     ※ターゲット。複数記載可能。


----------------------------------------
コマンド実行例1 (ansibleコマンド)
----------------------------------------
# ansible all -i hosts -m ping
node2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false,
    "ping": "pong"
}


※ansibleコマンドの引数について
all  インベントリに記載しているすべてのターゲットを対象。
     ターゲットグループ名を直接記載してもよい。
-i   インベントリを指定
-m   モジュールを指定 (ここではpingモジュール)
     モジュールは以下に置かれている
     /usr/lib/python3.6/site-packages/ansible/modules/
     モジュール一覧は以下。
     https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html


------------------------------------------
コマンド実行例2 (ansible-playbookコマンド)
------------------------------------------
Ansible.txtを参照。


参考：
http://c.itdo.jp/technical-information/ansible/ansible-tutorial/#heading3

==============================================================
■ MongoDB

参考：https://qiita.com/one-kelvin/items/b1740824da0b3e9af9dd

<手順概要>
1.mongoのrepoファイルを作成
2.yumでインストール
3.SELinuxを無効化
4.OSリブート
5.mongoDBが動作しているか確認


<手順>
1.mongoのrepoファイルを作成

[root@localhost yum.repos.d]# pwd
/etc/yum.repos.d
[root@localhost yum.repos.d]# ll
合計 48
-rw-r--r--. 1 root root  731  8月 14  2019 CentOS-AppStream.repo
・・・（省略）・・・・
-rw-r--r--. 1 root root  338  8月 14  2019 CentOS-fasttrack.repo
-rw-r--r--. 1 root root  200  7月  5 20:02 mongodb-org-3.4.repo    ★
[root@localhost yum.repos.d]# cat mongodb-org-3.4.repo
[mongodb-org-3.4]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc


2.yumでインストール
[root@localhost yum.repos.d]# yum install -y mongodb-org
MongoDB Repository                                           1.7 kB/s | 3.7 kB     00:02
依存関係が解決しました。
=============================================================================================
 パッケージ                アーキテクチャー
                                         バージョン             リポジトリ             サイズ
=============================================================================================
Installing:
 mongodb-org               x86_64        3.4.24-1.el8           mongodb-org-3.4         10 k
依存関係をインストール中:
 mongodb-org-mongos        x86_64        3.4.24-1.el8           mongodb-org-3.4         12 M
 mongodb-org-server        x86_64        3.4.24-1.el8           mongodb-org-3.4         20 M
 mongodb-org-shell         x86_64        3.4.24-1.el8           mongodb-org-3.4         11 M
 mongodb-org-tools         x86_64        3.4.24-1.el8           mongodb-org-3.4         67 M

・・・（省略）・・・・

インストール済み:
  mongodb-org-3.4.24-1.el8.x86_64               mongodb-org-mongos-3.4.24-1.el8.x86_64
  mongodb-org-server-3.4.24-1.el8.x86_64        mongodb-org-shell-3.4.24-1.el8.x86_64
  mongodb-org-tools-3.4.24-1.el8.x86_64

完了しました!


3.SELinuxを無効化
[root@localhost yum.repos.d]# cat /etc/sysconfig/selinux

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
#SELINUX=enforcing
SELINUX=disabled    ★
# SELINUXTYPE= can take one of these three values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected.
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted

4.OSリブート
# reboot


5.mongoDBが動作しているか確認
[root@localhost ~]# systemctl status mongod.service
● mongod.service - MongoDB Database Server
   Loaded: loaded (/usr/lib/systemd/system/mongod.service; enabled; vendor preset: disabled)
   Active: active (running) since Sun 2020-07-05 20:15:19 JST; 2min 44s ago    ★
     Docs: https://docs.mongodb.org/manual
  Process: 1004 ExecStart=/usr/bin/mongod $OPTIONS (code=exited, status=0/SUCCESS)
・・・（省略）・・・・


[root@localhost ~]# cat /var/log/mongodb/mongod.log
2020-07-05T20:15:15.764+0900 I CONTROL  [main] ***** SERVER RESTARTED *****
2020-07-05T20:15:16.164+0900 I CONTROL  [initandlisten] MongoDB starting : pid=1469 port=27017 dbpath=/var/lib/mongo 64-bit host=localhost.localdomain
2020-07-05T20:15:16.164+0900 I CONTROL  [initandlisten] db version v3.4.24
・・・（省略）・・・・
2020-07-05T20:15:19.357+0900 I COMMAND  [initandlisten] setting featureCompatibilityVersion to 3.4
2020-07-05T20:15:19.378+0900 I NETWORK  [thread1] waiting for connections on port 27017    ★



==============================================================
■ag (The Silver Searcher) のインストール

[root@localhost ~]# yum install -y https://dl.bintray.com/subchen/yum-repo/the_silver_searcher-2.1.0-1.el8.x86_64.rpm
CentOS-8 - AppStream                                               3.0 kB/s | 4.3 kB     00:01
CentOS-8 - Base                                                    2.4 kB/s | 3.9 kB     00:01
CentOS-8 - Extras                                                  1.1 kB/s | 1.5 kB     00:01
Extra Packages for Enterprise Linux Modular 8 - x86_64              13 kB/s | 8.5 kB     00:00
Extra Packages for Enterprise Linux 8 - x86_64                      28 kB/s | 9.3 kB     00:00
MongoDB Repository                                                 1.7 kB/s | 2.5 kB     00:01
the_silver_searcher-2.1.0-1.el8.x86_64.rpm                          27 kB/s |  56 kB     00:02
依存関係が解決しました。
===================================================================================================
 パッケージ                    アーキテクチャー バージョン            リポジトリ             サイズ
===================================================================================================
Installing:
 the_silver_searcher           x86_64           2.1.0-1.el8           @commandline            56 k

トランザクションの概要
===================================================================================================
インストール  1 パッケージ

合計サイズ: 56 k
インストール済みのサイズ: 156 k
パッケージのダウンロード中です:
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                                           1/1
  Installing       : the_silver_searcher-2.1.0-1.el8.x86_64                                    1/1
  scriptletの実行中: the_silver_searcher-2.1.0-1.el8.x86_64                                    1/1
  検証             : the_silver_searcher-2.1.0-1.el8.x86_64                                    1/1

インストール済み:
  the_silver_searcher-2.1.0-1.el8.x86_64

完了しました!

[root@localhost ~]# which ag
/usr/bin/ag

==============================================================
■ Vagrant  (ベイグラント)

設定ファイルだけで、VirtualBoxのゲストOSを1から自動でセットアップしてくれるツール。

参考：https://qiita.com/mikoski01/items/c3984901c22a7736d726

<手順概要>  ※VirtualBoxはインストール済みの前提
1.Vagrantをインストール
2.Vagrantの設定ファイルを変更 (CentOS7.8)
3.Vagrantを起動
4.TeraTermでssh

<手順>
1.Vagrantをインストール
https://www.vagrantup.com/downloads.html

2.vagrant-vbguestをインストール
DOS窓から以下を実行
vagrant plugin install vagrant-vbguest

3.Vagrantfileの作成
ここではC:\_Dev\Work を作業フォルダとする
作業フォルダをカレントにして以下を実行
vagrant init

→作業フォルダにVagrantfileが作成される。

4.Vagrantfileの修正
→Vagrant\CentOS7.8\Vagrantfile

5.Vagrantを起動
DOS窓から以下を実行
vagrant up
→設定ファイルのconfig.vm.boxに指定したゲストOSのイメージファイルをダウンロードして
セットアップまでやってくれる。（ただし初回は2時間くらいかかった。。。）


6.TeraTermでssh
ホスト：127.0.0.1:2222  ポート：2222
user/pass：vagrant/無し
RSA/DSA/ECDSA/ED25519鍵を使う：C:\_Dev\Work\.vagrant\machines\default\virtualbox\private_key

7.WinSCPで接続
ホスト：127.0.0.1  ポート：2222
user/pass：vagrant/無し
設定：SSH/認証：認証条件/秘密鍵：C:\_Dev\Work\.vagrant\machines\default\virtualbox\private_key
→変換するか聞かれるので変換する。

8.Vagrantを停止  (VirtualBoxが電源OFFでもよい)
DOS窓から以下を実行
vagrant halt



一度、vagrant up すれば、裏ではVirtualBox上で起動している。（画面には見えないけど）
VirtualBoxを起動すれば、ゲストOSが起動中であることを確認できる。（スナップショットも取れる）

あと、vagrantしかいないので、root権限が必要なコマンドには、sudoをつけて実行すること。
→$ sudo su -
  でrootに切り替えできた。


あとは、今まで通り、VirtualBoxを起動して、スナップショットを復元すればよい。
→つまり、vagrantは、セットアップまでしか使わない。




==============================================================
■ Docker

<概要>
コンテナ型の仮想化アプリ。OSまるごと使わないので軽い。
※現時点は、CentOS8には対応していないらしいので、↑のvagrantで作ったCentOS7.xで実行すること。


<用語>
イメージ：コンテナを作るための母体。いちど作ったイメージは不変であり、固定。
コンテナ：Linuxの通常のプロセスとほぼ同じもの。
          利用できる名前空間やリソースが他のプロセスやコンテナからは隔離される
          コンテナ内のアプリケーションから見ると、独立したコンピュータ上で動作しているように振る舞う。
          コンテナを管理するコストはプロセスを管理するコストとほとんど変わらず、仮想マシンを管理するコストと比較すると非常に軽い。
Dockerfile：自前のイメージを作るための手順を書いたファイル。
$ docker run：イメージを元にコンテナを走らせるコマンド。
$ docker build：Dockerfile を元にイメージを作るためのコマンド。
$ docker inspect：イメージやコンテナの詳細を調べるコマンド。
Docker Hub：docker のイメージがたくさん置いてある場所。
            docker pull とか docker run すると、自動的にレポジトリからイメージをクローンしてきてくれる。



<参考>
https://qiita.com/daichannel/items/e4928c07f613ea9154c3
https://www.atmarkit.co.jp/ait/articles/1701/30/news037.html
https://qiita.com/wMETAw/items/34ba5c980e2a38e548db


<手順>
1.Dockerを利用するのに必要なパッケージ(yum-utils, device-mapper-persistent-data, lvm2)をインストールします。
$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2

2.Dockerをダウンロードするリポジトリをyum(パッケージ管理)に追加します。
$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

3.yumのパッケージインデックスを更新(DockerのINSTALLやUPGRADEの前に一回実行することが推奨されている)
$ sudo yum makecache fast

4.最新版のDockerをインストールします。
$ sudo yum install docker-ce

5.Dockerデーモンを起動します。
$ sudo systemctl start docker
$ sudo systemctl enable docker
→enable は、OS起動時に自動的にdockerサービスを起動するようにするため。


<よく使うコマンド>
-----------------------------------------
コンテナの一覧を表示
$ sudo docker ps -a
→STATUSが「Up」となっていれば実行中。

-----------------------------------------
コンテナを開始
sudo docker run イメージ名

-----------------------------------------
コンテナを停止
sudo docker stop コンテナID

-----------------------------------------
イメージの一覧を表示
$ sudo docker images

-----------------------------------------
イメージを削除
$ sudo docker rmi イメージID



==============================================================
■ MongoDB  (Docker版)


イメージを取得
$ sudo docker pull mongo

コンテナの作成＆起動
$ sudo docker run --name some-mongo -d mongo

mongo CLI を起動
$ sudo docker run -it --link some-mongo:mongo --rm mongo sh -c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'

→MongoDBに接続するためには通常MongoDBクライアントコマンドであるmongoコマンドを用いるが、
  MongoDB自体をコンテナイメージとしてインストールしているため、ローカル環境にmongoコマンドは存在しない。
  そのため、Docker経由でmongoコマンドを呼び出す必要がある。

→オプション
-it     対話するために必要
--link  既に起動しているmongodbコンテナと接続。別コンテナなので、こうしないと接続できない。
        mongoでコンテナイメージを指定
--rm    終わったらコンテナを消す(コマンドを一回打つためだけのコンテナなので)
sh -c   実行コマンドとして'mongo xxx'を指定。これが実行される。
        $MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORTの部分はDockerで自動的に生成される環境変数で
        MongoDBのIPアドレスとポート番号を参照している。
        /testはデータベース名。testというデータベースに接続している


==============================================================
■ td-agent

fluentdというRubyで書かれたログ収集ツールがある。
fluentdは、GEM(RPMのRuby版みたいなもの)で配布されているが、td-agentは
RPMで配布されているので入れやすい。（中身はfluentdと一緒）

-----------------------------------------
参考：https://www.atmarkit.co.jp/ait/articles/1402/06/news007.html
      https://www.atmarkit.co.jp/ait/articles/1403/05/news012.html
      https://nec-baas.github.io/baas-manual/latest/server/ja/server/configure/fluentd.html
      https://knowledge.sakura.ad.jp/1336/
      https://qiita.com/nkg/items/cbf72adb436456804d76

-----------------------------------------
td-agentインストール
# curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent3.sh | sh

-----------------------------------------
mongoプラグイン インストール
# /usr/sbin/td-agent-gem install fluent-plugin-mongo

-----------------------------------------
設定ファイルを変更
※この例では、Apache(httpd)に対して、ホストPCからアクセス(http://localhost:50080)して、
  /var/log/httpd/access_logを更新して、その内容をmongoDB(fluentdデータベース。apache_accessコレクション)に登録する。

/etc/td-agent/td-agent.conf
<source>
  @type tail
  path /var/log/httpd/access_log
  tag apache.access
  pos_file /var/log/td-agent/httpd-access_log.pos
  format apache2
</source>

<match apache.access>
  @type copy

  <store>
    @type mongo
    host localhost
    port 27017
    database fluentd
    collection apache_access
    capped
    capped_size 1024m
    # flush
    flush_interval 10s
  </store>
</match>


-----------------------------------------
td-agentサービスを開始
# systemctl start td-agent

-----------------------------------------
td-agentのログを確認
/var/log/td-agent/td-agent.log


→error="Permission denied @ rb_file_s_stat - /var/log/nginx/access.log"　が出た場合。

# chown -R root:td-agent /var/log
# chmod -R 775 /var/log/

# vim /etc/init.d/td-agent
#TD_AGENT_USER=td-agent
TD_AGENT_USER=root
#TD_AGENT_GROUP=td-agent
TD_AGENT_GROUP=root


td-agentを再起動
# systemctl restart td-agent

ホストPCのブラウザから、もう一度Apacheにアクセス。

td-agent.logにエラーがなくなっていれば、
# mongo
> show dbs    で、fluentdデータベースが出てくるはず。




-----------------------------------------
最初から入っているプラグイン
/opt/td-agent/embedded/lib/ruby/gems/2.4.0/gems/fluentd-1.11.1/lib/fluent/plugin


==============================================================
■ OpenAPI

・WebAPI(=REST API)の定義（エンドポイントやメソッドなど）のYAMLなどで統一的に書くための仕様。
　SwaggerというOSSから、OpenAPIになったっぽい。


・YAMLなどから、WebAPIのサーバ/クライアントのソースコードを自動生成するツールがある。
　・Swagger CodeGen：一応、OpenAPIの公式っぽいがモメてるっぽい。
　・OpenAPI Generator：ややこしいが、OpenAPI公式ではない。Swagger CodeGenからフォーク。こっちが良い？
                       生成するコマンド（openapi-generator-cli）がGitで提供されている。


・開発イメージ
　1.YAMLを書く。
　2.MavenにOpenAPI Generatorのプラグインを入れてビルド。
　　→プラグインは、pom.xmlに書く。
　3.WebAPI(REST API)のサーバコード(JavaServelet)と、クライアント(CLI等)のコード(Pythonなど)が自動生成される。
　4.warファイルをWebサーバ(+サーブレットコンテナ= Jetty)にデプロイ。


参考：https://ky-yk-d.hatenablog.com/entry/2019/01/13/234108
      https://www.opentone.co.jp/news/release/article04/article0401.html


JAX-RS：Java Community Process(JCP)という組織が定めたRESTful Webサービスの実装に関するJavaの仕様のこと。
Jersey：JAX-RSの実装の1つ。
Jetty：サーブレットコンテナ


==============================================================
■ Maven（Apache Maven）

Java開発でもっとも広く利用されているビルドツール
Mavenの最大の功績は「セントラルリポジトリ」と呼ばれるものを用意したこと。
これは、Javaで利用されるさまざまなライブラリやプログラム類を集中管理するサーバーで、
Mavenはこのサーバーにアクセスし、必要に応じてプログラムをダウンロードしプロジェクトにインストールします。
つまり、開発者がライブラリなどを自分でインストールしたりして管理する必要がないのです。
Maven以外のビルドツールでも、このMavenのセントラルリポジトリに対応しているものが多いのです。

Mavenは、XMLでビルドファイルを作成します。(pom.xml)


参考：https://qiita.com/ryo-sato/items/1022b76ac3b345ca0800
      https://www.tuyano.com/index2?id=5729201025974272

OpenJDK 1.8を入れる
# yum -y install java-1.8.0-openjdk-devel

Maven3.5.2をダウンロードして/opt に配置
# curl -OL https://archive.apache.org/dist/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz
# tar -xzvf apache-maven-3.5.2-bin.tar.gz
# mv apache-maven-3.5.2 /opt/

~/.bash_profileに以下を追加してパスを通す。
JAVA_HOME=/usr/java/default/
PATH=$PATH:/opt/apache-maven/bin

設定を反映
# source ~/.bash_profile

バージョン確認
# mvn --version

--------------------------------
以下は主なコマンド

◎プロジェクト作成
# mvn archetype:generate

◎検証
# mvn validate

◎コンパイル
# mvn compile

◎テスト
# mvn test

◎パッケージを生成
# mvn package


--------------------------------
Mavenのキモはpom.xmlで、構造は以下。

<project ……略……>

    <modelVersion>4.0.0</modelVersion>
    <groupId>グループID</groupId>
    <artifactId>アーティファクトID</artifactId>
    <version>バージョン</version>
    <packaging>jar</packaging>
    <name>名前</name>

    <properties>
        ……プロパティ情報……
    </properties>

    <dependencies>
        ……依存ライブラリ情報……
    </dependencies>

</project>



