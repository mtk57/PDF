VirtualBoxに ゲストOSをCentOSを入れて、TeraTermでSSH接続するときのメモ。


1.VirtualBox、CentOSのインストールは省略。（ググればすぐ出るので）
  CentOSのVersionは「8」

  # cat /etc/redhat-release
  CentOS Linux release 8.1.1911 (Core)


2.VirtualBoxの設定変更は以下のみ。
  [設定] - [ネットワーク]
    [アダプター1]
      割り当て：NAT
      ポートフォワーディング
        名前：ssh              (何でもいい)
        プロトコル：TCP
        ホストポート：2222     (何でもいい)
        ゲストポート：22
  →設定後は再起動

3.CentOSの設定は以下のみ。
  まず、
  # ifconfig
  で、NICの一覧を出す。

  一覧の中に、inet 10.x.x.x のIPアドレスが表示されていない場合、
  NICがOFFになっているので、
  # ifup enp0s3
  で、ONにする。(enp0s3はNICの名前。環境によって変わるかも)

  再度、
  # ifconfig
  で、enp0s3に、IPアドレスが出たらOK

4.あとは、TeraTermで「127.0.0.1:2222」でSSH接続できるはず。
  →WinSCPも同じ。


==============================================================
■ NATモード

VirtualBoxがルータとなり、ホストOSとゲストOSを中継するモードです。
ゲストOSからホストOSにアクセスすることや、ゲストOSからホストOSを経由してインターネットアクセスをすることができます。

ただし、デフォルトではホストOSからゲストOSへのアクセスは行えません。

==============================================================
■ ポートフォワーディング

NATモードでホストOSからゲストOSにアクセスできるようにする設定です。
ホストOSのあるポートにアクセスすると自動でゲストOSのあるポート（通常はSSHの22番ポート）に
転送（フォワーディング）してくれます。

==============================================================
■ ブリッジアダプター

NATだと、VM同士の通信が出来ないため、ブリッジアダプターの手順も以下に示す。
ブリッジアダプターだと、VM同士、VMからインターネット、VMとホストの全ての接続ができるので最強。(NATネットワークでも良いけど)


1.VirtualBoxの設定変更は以下のみ。
  [設定] - [ネットワーク]
    [アダプター1]
      割り当て：ブリッジアダプター

  →設定後は再起動

3.CentOSの設定

  デフォルトでは、NIC (enp0s3)のDHCP等が有効になっていないので、IPアドレスが割り当たっていないため
  接続できないため、手動でIPアドレスを設定をする必要がある。
  設定は、NetworkManagerの「nmcli」というCLIを使用する。

  3-1.デバイス(NIC)の一覧を確認。（未接続になっているのが判る）
      # nmcli device
      DEVICE  TYPE      STATE          CONNECTION
      enp0s3  ethernet  disconnected   --
      (省略)

  3-2.念の為、MACアドレスを確認。（VMのネットワーク設定と一致していること）
      # nmcli device show enp0s3
      (省略)
      GENERAL.TYPE:     08:00:27:8F:D5:14
      (省略)

  3-3.enp0s3の設定を確認。（自動接続がOFFなのが判る）
      # nmcli connection show enp0s3 | less
      (省略)
      connection.autoconnect:    no
      (省略)

  3-4.IPアドレス、DNS、Gatewayを手動で設定する。
      # nmcli connection modify enp0s3 ipv4.method manual ipv4.address 192.168.11.100/24
      # nmcli connection modify enp0s3 ipv4.dns 192.168.11.1
      # nmcli connection modify enp0s3 ipv4.gateway 192.168.11.1
      # nmcli connection modify enp0s3 connection.autoconnect yes

  3-5.設定を有効にする。
      # nmcli device disconnect enp0s3
      Device 'enp0s3' successfully disconnected.
      # nmcli connection up enp0s3
      Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)

  3-6.NICの状態を確認。
      # nmcli device
      DEVICE      TYPE      STATE      CONNECTION
      enp0s3      ethernet  connected  enp0s3
      (省略)


4.あとは、TeraTermで「192.168.11.100」でSSH接続できるはず。
  →WinSCPも同じ。




参考：
https://bleu-bleut.hatenablog.jp/entry/2017/05/09/171832
https://qiita.com/feifo/items/0fde474005589afcff68


==============================================================
■ ネットワークまとめ

参考：https://endy-tech.hatenablog.jp/entry/2018/10/27/134223
      https://qiita.com/kanatatsu64/items/b7b8eca17202386d27e3
      http://iwsttty.hatenablog.com/entry/2013/12/08/194430     ※図が素晴らしい!


1.ホストオンリーアダプター

  仮想的なアダプタ（NIC）をホストOSに作成して、それを通して、VirtualBoxの仮想マシンとホストOSを接続します。
  ホストOSからすると、物理的にLAN接続して別の機器を通信しているように見えます。
  VirtualBoxの仮想マシン同士も、このloopback interfaceとして作られたアダプタを通して通信するので、ホストOSからパケットを覗くことができます。
  なお、このネットワークは、ホストOSの物理的なアダプタと関わらないので、仮想マシンがインターネットへ出ることはできません。
  DHCPも使えるが、静的アサインも可能。その場合は192.168.56.xxxで割り振る。


2.内部ネットワーク

  VirtualBox内部のスイッチ的なものを通して仮想マシン同士を通信を可能にします。
  ホストOSのアダプタは一切介さないので、ホストOSからパケットを覗くことはできません。
  また、当然このネットワークもインターネットと接続することはできません。


3.NAT

  ホストOSと仮想マシンをつなぎ、仮想マシンからインターネットへの接続を可能にします。
  VirtualBoxがルーターとして、仮想マシンとホストOSをつなぎ、さらにホストOSが仮想マシンからのパケットをルーティングして、
  インターネットへと送り出します。
  ホストOSからは、VirtualBoxの仮想マシンも別のネットワークにいるホストに見えます。

  この設定は仮想マシンごとに、OSとの間にルーターがあるイメージなので、仮想マシン同士は接続できません。
  また、NATを挟んでいるので、そのままではインターネットやホストOSから仮想マシンへアクセスすることはできません。
  （ポートフォワーディングを行えば可能）。

  仮想マシン同士が接続できないので一見不便ですが、インターネットからアクセスさせるような時、その対象を指定の一台に限定することができます。


4.NATネットワーク

  VirtualBox内のNAT用ネットワークと、ホストOSとを接続します。
  ホストOSやインターネットからの見え方はNATと同じです。

  NATと異なり、VirtualBoxの内部ネットワークを作成するので、仮想マシン同士も接続が可能です。


5.ブリッジアダプター

  ホストOSの物理アダプタを利用して、仮想マシンとホストOSを接続します。
  ホストOSからすると、既存のアダプタで接続しているネットワーク上に、新しく機器が加わったような感じです。
  （VirtualBoxはスイッチ的な役割）。

  ブリッジ接続した仮想マシン同士の通信は可能です。
  実際はホストOSの物理アダプタを利用した通信なので、仮想マシン同士の通信はアダプタからパケットが覗けます。
  また、同じアダプタをつかっているので、当然仮想マシンもインターネットへ接続ができるようになります。

  NATと違い、ホストOS同様もろにインターネットにさらされることになる点に注意。



(H=HostOS, G=GuestOS, I=Internet)
----------------------------------------------------------------
                           H→G   G→H  G→G  G→I  I→G    DHCP
----------------------------------------------------------------
ホストオンリーアダプター    ○     ○    ○    ✕    ✕     ○     必ず使うかも
内部ネットワーク            ✕     ✕    ○    ✕    ✕     ✕     セグメントを分けたい場合
NAT                         △     ○    ✕    ○    △     ○     yumやpipを使う場合に必要
NATネットワーク             △     ○    ○    ○    △     ○     使わない
ブリッジアダプター          ○     ○    ○    ○    ○     ✕     使わない
--------------------------------------------------------

【凡例】
H：HostOS
G：GuestOS
I：Internet

○：接続可能
△：接続可能（要ポートフォワーディング）
✕：接続不可

-----------------------------
● DHCPで割り当てられるIP
      NET                    H           G (例)
------------------------------------------------------
NAT   10.0.x.0               10.0.2.2    10.0.2.3



x=NIC番号(eth0) + 2

==============================================================
■ 時刻同期

スナップショットを使うと、スナップショットを取った時刻で復元されるので、
chronyで時刻の同期を行う。

# systemctl restart chronyd
# chronyc sources
210 Number of sources = 4
MS Name/IP address         Stratum Poll Reach LastRx Last sample
===============================================================================
^- time.paina.net                1   6    37    44    -17ms[  -10ms] +/-   80ms
^* 30-213-226-103-static.ch>     1   6    37    44  -2202us[+5239us] +/-   26ms
^+ time.cloudflare.com           3   6    37    44  +5460us[  +13ms] +/-   69ms
^+ time.cloudflare.com           3   6    37    45   -671us[+6708us] +/-   64ms
==============================================================

* がついていれば同期しているってことらしい。

# date


==============================================================
■ タイムゾーン変更
# cp /etc/localtime /etc/localtime.org
# ln -sf  /usr/share/zoneinfo/Asia/Tokyo /etc/localtime





==============================================================
■ ネットワークアダプタの追加


●VirtualBox
ネットワークアダプタ2を追加する（ホストオンリーアダプター：VirtualBox Host-Only Ethernet Adapter）
→これで、ネットワークアダプタは追加されるが、IPアドレスが未割り当ての状態。


●CentOS
参考：https://qiita.com/9ryuuuuu/items/c604d8d086f62aaf2362


ネットワークアダプタの状態を確認。

# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
        inet6 fe80::5054:ff:fe4d:77d3  prefixlen 64  scopeid 0x20<link>
        ether 52:54:00:4d:77:d3  txqueuelen 1000  (Ethernet)
        RX packets 172  bytes 16774 (16.3 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 139  bytes 17143 (16.7 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 08:00:27:1e:77:20  txqueuelen 1000  (Ethernet)
        RX packets 132  bytes 12144 (11.8 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 61  bytes 10430 (10.1 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

→eth1 にinet(IPv4のアドレス)が表示されていない。




# nmcli device status
DEVICE  TYPE      STATE         CONNECTION
eth0    ethernet  connected     System eth0
eth1    ethernet  disconnected  --
lo      loopback  unmanaged     --

# nmcli connection show
NAME                UUID                                  TYPE      DEVICE
System eth0         5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  ethernet  eth0
Wired connection 1  c99ebbbc-5ebf-3126-93a2-b63685e83e2e  ethernet  --

→nmcliでも見ても同じ。


コネクション名を変更
# nmcli connection modify 'Wired connection 1' connection.id enp0s8



# nmcli connection show
NAME         UUID                                  TYPE      DEVICE
enp0s8       c99ebbbc-5ebf-3126-93a2-b63685e83e2e  ethernet  eth1
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  ethernet  eth0

→変わった


ホスト(Windows)でVirtualBoxのネットワークを確認する。
# ipconfig

(中略)

イーサネット アダプター VirtualBox Host-Only Network:

   接続固有の DNS サフィックス . . . . .:
   リンクローカル IPv6 アドレス. . . . .: fe80::a579:a83f:4809:522a%10
   IPv4 アドレス . . . . . . . . . . . .: 192.168.56.1
   サブネット マスク . . . . . . . . . .: 255.255.255.0
   デフォルト ゲートウェイ . . . . . . .:

(中略)


→仮想マシンに設定可能なIPは 192.168.56.2～ 192.168.56.254 。



IPアドレス(192.168.56.99)を設定する
# nmcli connection modify enp0s8 ipv4.method manual ipv4.addresses 192.168.56.99/24



# nmcli device status
DEVICE  TYPE      STATE      CONNECTION
eth0    ethernet  connected  System eth0
eth1    ethernet  connected  enp0s8
lo      loopback  unmanaged  --

→connectedになった。


ネットワークを再起動
# systemctl restart network



IPアドレスが設定されたことを確認 (# ip aは「ip address」の短縮版)
# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:4d:77:d3 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0
       valid_lft 86248sec preferred_lft 86248sec
    inet6 fe80::5054:ff:fe4d:77d3/64 scope link
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 08:00:27:1e:77:20 brd ff:ff:ff:ff:ff:ff
    inet 192.168.56.99/24 brd 192.168.56.255 scope global noprefixroute eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::5299:779c:bb6f:fb01/64 scope link noprefixroute
       valid_lft forever preferred_lft forever

→eth1に「192.168.56.99」が割り当たった!

あとは、OSを再起動する。
 (これでホストからこのアドレスでsshできるはず)





/etc/sysconfig/network-scripts
