!	statement	"Python文の実行
現在のスタックフレームのコンテキストにおいて(一行の) statement を実行します。
文の最初の語がデバッガーコマンドと共通でない場合は、感嘆符を省略することができます。
グローバル変数を設定するために、同じ行に global 文とともに代入コマンドの前に付けることができます。
"
alias	[name [command]]	"name という名前の command を実行するエイリアスを作成します。
コマンドは引用符で囲まれていては いけません。
入れ替え可能なパラメータは %1、%2 などで指し示され、さらに %* は全パラメータに置き換えられます。
コマンドが与えられなければ、name に対する現在のエイリアスを表示します。
引数が与えられなければ、すべてのエイリアスがリストされます。
"
args	-	"現在の関数の引数一覧を表示
"
break	[([filename:]lineno | function) [, condition]]	"ブレークポイントの設定、表示

lineno：現在のファイルのその行番号の場所にブレークポイントを設定します。
function：その関数の中の最初の実行可能文にブレークポイントを設定します。
別のファイル (まだロードされていないかもしれないもの) のブレークポイントを指定するには、行番号の前にファイル名とコロンを付けます。
ファイルは sys.path にそって検索されます。
各ブレークポイントには番号が割り当てられ、その番号を他のすべてのブレークポイントコマンドで参照されることに注意してください。
condition：その値は式で、その評価値が真でなければブレークポイントは有効になりません。

引数なしの場合は、それぞれのブレークポイントに対して、そのブレークポイントに行き当たった回数、現在の通過カウント ( ignore count ) と、もしあれば関連条件を含めてすべてのブレークポイントをリストします。
"
continue		"続行
ブレークポイント、あるいはpdb.set_trace()がある行まで実行を継続
"
clear	[filename:lineno | bpnumber [bpnumber ...]]	"指定番号のブレークポイントを削除

filename:lineno 引数を与えると、その行にある全てのブレークポイントを解除します。
スペースで区切られたブレークポイントナンバーのリストを与えると、それらのブレークポイントを解除します。
引数なしの場合は、すべてのブレークポイントを解除します ( が、はじめに確認します ) 。
"
commands	[bpnumber]	"ブレークポイントナンバー bpnumber にコマンドのリストを指定します。
コマンドそのものはその後の行に続けます。
end だけからなる行を入力することでコマンド群の終わりを示します。
"
condition	bpnumber [condition]	"ブレークポイントに新しい condition を設定します。
condition はブレークポイントを制御する条件式で、この式が真を返す場合のみブレークポイントが有効になります。
condition を指定しないと既存の条件が除去されます; ブレークポイントは常に有効になります。
"
disable	[bpnumber [bpnumber ...]]	"ブレークポイント番号 bpnumber のブレークポイントを無効にします。
ブレークポイントを無効にすると、プログラムの実行を止めることができなくなりますが、ブレークポイントの解除と違いブレークポイントのリストに残っており、(再び) 有効にできます。
enableの逆。
"
display	[expression]	"式の値が変更されていれば表示します。
毎回実行は現在のフレームで停止します。

式を指定しない場合、現在のフレームのすべての式を表示します。
"
down	[count]	スタックフレーム内で現在のフレームを count レベル (デフォルトは 1) 新しいフレーム方向に移動します。
enable	[bpnumber [bpnumber ...]]	"指定したブレークポイントを有効にします。
disableの逆。
"
help	[command]	ヘルプを表示
ignore	bpnumber [count]	"与えられたブレークポイントナンバーに通過カウントを設定します。
count が省略されると、通過カウントは 0 に設定されます。
通過カウントがゼロになったとき、ブレークポイントが機能する状態になります。
ゼロでないときは、そのブレークポイントが無効にされず、どんな関連条件も真に評価されていて、ブレークポイントに来るたびに count が減らされます。
"
interact	-	"対話型インタープリターを (code モジュールを使って) 開始します。
グローバル名前空間には現在のスコープで見つかったすべてのグローバルおよびローカル名が含まれます。
"
jump	lineno	"次に実行する行を指定します。
最も底のフレーム中でのみ実行可能です。
前に戻って実行したり、不要な部分をスキップして先の処理を実行する場合に使用します。

ジャンプには制限があり、例えば for ループの中には飛び込めませんし、 finally 節の外にも飛ぶ事ができません。"
list	[first[, last]]	"現在行のソースコードを表示
引数を指定しないと、現在の行の前後 11 行分を表示するか、直前の表示を続行します。
引数に . を指定すると、現在の行の前後 11 行分を表示します。
数値を 1 個指定すると、その行番号の前後 11 行分を表示します。
数値を 2 個指定すると、開始行と最終行として表示します; 
2 個めの引数が 1 個め未満だった場合、1 個目を開始行、2 個めを開始行からの行数とみなします。

現在のフレーム内の現在の行は -> で表示されます。
例外をデバッグ中の場合、例外が発生または伝搬した行は、それが現在の行とは異なるとき >> で表示されます。
"
ll	-	"現在の関数またはフレームの全ソースコードを表示します。(longlist)
注目する行は list と同じようにマーカー（->）がつきます。
"
next	-	"ステップオーバー
現在行を実行し、次の行に進む。
次の行が関数であっても、関数内で停止しない。
"
p	expression	"変数の値を表示
現在のコンテキストにおいて expression を評価し、その値をプリントします。
"
pp	expression	式の値以外は pprint モジュールを使用して "pretty-print" されます。
quit		"デバッガを終了
実行中のプログラムは中断される。
"
return	-	"ステップオーバー
現在の関数から抜ける
"
"run
restart"	[args ...]	"デバッグ中のプログラムを再実行します。
引数が与えられると、 shlex で分割され、結果が新しい sys.argv として使われます。
ヒストリー、ブレークポイント、アクション、そして、デバッガーオプションは引き継がれます。 
restart は run の別名です。
"
source	expression	"与えられたオブジェクトのソースコードの取得を試み、可能であれば表示します。
"
step	-	"ステップイン
現在行を実行し、次の行に進む。
次の行が関数の場合、関数内で停止。
"
tbreak	[([filename:]lineno | function) [, condition]]	"一時的なブレークポイントで、最初にそこに達したときに自動的に取り除かれます。
パラメータはbreakと同じ。"
up	[count]	スタックフレーム内で現在のフレームを count レベル (デフォルトは 1) 古いフレーム方向に移動します。
whatis	expression	"式の型を表示します。
"
where	-	"スタックトレースを表示
"
unalias	name	"指定したエイリアスを削除します。
"
undisplay	[expression]	"現在のフレーム内で式をこれ以上表示しないようにします。
式を指定しない場合、現在のフレームで display 指定されている式を全てクリアします。
"
until	[lineno]	"引数なしだと、現在の行から 1 行先まで実行します。

行数を指定すると、指定行数かそれ以上に達するまで実行します。どちらにしても現在のフレームが返ってきた時点で停止します。"
