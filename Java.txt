https://www.programcreek.com/java-api-examples/?action=search   (java-api-examples)




■SOAP
HTTP、FTP、SMTPなどのプロトコルを使ってWebサービスを呼び出すもので、通信にはXML文書が用いられる。


■WSDL  (Web Services Description Language)

Webサービス記述言語、または定義ファイル
XML形式

Webサービスの具体的内容を記述し、サービス提供されている場所、
サービスに用いられているメッセージのフォーマット、プロトコルなどが記述されている。

---
XMLを用いてWebサービスが記述されたもの。
Webサービスのアドレスの最後に『?wsdl』と追加すると閲覧、使用することができる。
Apache Axisや.Net等を使用することで、WSDLからスタブ（WebサービスのSOAP通信の部分等・・）を自動生成することができ、
XMLやSOAPを意識することなく、簡単にクライアントが作成できる。


AxisについているWSDL2Javaみたいなコマンドで、WSDLファイルからスタブを自動生成するイメージだと思う。




■Apache Axis
Javaで書かれたSOAP実装の一つです。 
Apache SOAP2.xの後継にあたり、Apache SOAPに比べ JAX-RPC、WSDLへの対応など大幅機能追加されています。 

JavaとXML技術に基づいたWebサービスのフレームワーク
SOAPサーバの実装、Webサービスを生成するためのツール、Webサービスをデプロイ（配備）するためのツールなどから構成

Axis1とAxis2があり、Axis1はかなりダメな実装らしい。
Axis1は1.4が最後。（2006年開発終了）
Axis2は1.7.8が最新 (2018/5/19)








■参考
https://blogs.yahoo.co.jp/dk521123/36872164.html
http://d.hatena.ne.jp/htz/20090218/1234957870
http://muimi.com/j/axis/
http://axis.apache.org/axis/
https://axis.apache.org/axis/ja/java/integration-guide.html
https://www.atmarkit.co.jp/ait/articles/0303/18/news003.html
https://www.zaneli.com/blog/20111218
https://stackoverflow.com/questions/34180289/how-to-enforce-an-axis-client-to-use-tlsv1-2-protocol
https://axis.apache.org/axis/java/apiDocs/org/apache/axis/AxisProperties.html
https://axis.apache.org/axis/ja/java/user-guide.html
https://axis.apache.org/axis/ja/java/developers-guide.html



https://wiki.apache.org/ws/FrontPage/Axis/AxisClientConfiguration/Ssl
https://wiki.apache.org/ws/FrontPage/Axis/DynamicSSLConfig
https://github.com/linhkuivanen/axistools
https://stackoverflow.com/questions/30827978/how-to-programmatically-set-the-ssl-context-of-a-axis-client
https://stackoverflow.com/questions/3247746/java-loading-ssl-keystore-via-a-resource/3256676#3256676
http://axis.apache.org/axis/java/transports/http-hc3/index.html
  ⇒ここを見ると、トランスポート層はHttpClient3を使っているとあるので、
    ImageUploadで用いた手法が使えるのでは???



https://www.soapui.org/soap-mocking/tips-and-tricks/securing-mockservices-with-ssl.html
SoapUIでSSL

https://docs.oracle.com/cd/E77565_01/E54670/html/ol7-keytool-sec.html
https://www.qoosky.io/techs/9db75cec15


-------------------------
https://hc.apache.org/httpclient-3.x/sslguide.html
http://svn.apache.org/viewvc/httpcomponents/oac.hc3x/trunk/src/contrib/org/apache/commons/httpclient/contrib/ssl/EasySSLProtocolSocketFactory.java?view=markup


public boolean equals(Object obj) {
    return ((obj != null) && obj.getClass().equals(EasySSLProtocolSocketFactory.class));
}

public int hashCode() {
    return EasySSLProtocolSocketFactory.class.hashCode();
}

https://stackoverflow.com/questions/52875113/does-protocol-registerprotocol-for-apache-httpclient-cause-a-global-static-chang
⇒Protocol.registerProtocolは全スレッドが影響を受けるとある




------------------------------------------
https://go-journey.club/archives/4038

■流れ
①keystoreを作成する
②自前の CA（プライベート CA）を作成する
③証明書要求（CSR）を作成する
④証明書を発行する
⑤証明書を登録する



JKSキーストアとは？
JKSとはキーストア（鍵ストア、keystore）のファイル形式です。
他には「JCEKS」「PKCS#12」があります。
制約としては「JKS」は「共通鍵暗号方式」をサポートしていません。
公開鍵暗号方式をサポートしています。

キーストア（鍵ストア、keystore）とは、読んだそのままですが、鍵の保管庫です。
たくさんの鍵を保管しているリポジトリというイメージです。
具体的に言うと「公開鍵」「秘密鍵」「サーバー証明書」を保管しています。


■例
①keystoreを作成する（jks）
keytool -genkeypair -alias keystore_alias -keyalg RSA -keypass test123 -keystore keystore.jks -storepass test123


②自前の CA（プライベート CA）を作成する


③証明書署名要求を作成する（csr）
　⇒実際にはcsrは認証局(CA)に送る
keytool -certreq -alias keystore_alias -file server.csr -keypass test123 -keystore keystore.jks -storepass test123

④サーバー証明書を発行する（crt）
openssl ca -keyfile /etc/pki/CA/private/./cakey.pem -cert /etc/pki/CA/cacert.pem -in server.csr -out servercert.crt


⑤サーバー証明書を登録する
keytool -import -alias keystore_alias -file servercert.crt -keypass test123 -keystore keystore.jks -storepass test123





------------------------------------------
https://docs.oracle.com/cd/E19159-01/820-4604/ablrb/index.html

JKS(Java Key Store)から、CER(証明書)のエクスポート
keytool -export -alias keyAlias -storepass changeit -file server.cer -keystore keystore.jks

cacertsにCER(証明書)を追加する
keytool -import -v -trustcacerts -alias keyAlias -file server.cer -keystore cacerts.jks -keypass changeit



